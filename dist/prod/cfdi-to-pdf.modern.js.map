{"version":3,"file":"cfdi-to-pdf.modern.js","sources":["../../src/abstract-invoice-data.ts","../../src/cfdi-data.ts","../../src/retenciones-data.ts","../../src/utils/currency.ts","../../src/utils/break-characters.ts","../../src/exceptions/pdfmake-not-found.ts","../../src/pdfmake-builder.ts","../../src/builders/pdf-maker-builder.ts","../../src/builders/pdf-maker-browser-builder.ts","../../src/templates/complements/pago10-complement.ts","../../src/templates/complements/pago20-complement.ts","../../src/templates/complements/imp-local10-complement.ts","../../src/templates/generic-cfdi-translator.ts","../../src/templates/generic-retenciones-translator.ts"],"sourcesContent":["import { DiscoverExtractor } from '@nodecfdi/cfdi-expresiones';\nimport { CNodeInterface, XmlNodeUtils, getParser } from '@nodecfdi/cfdiutils-common';\n\nexport abstract class AbstractInvoiceData {\n    protected _emisor!: CNodeInterface;\n\n    protected _receptor!: CNodeInterface;\n\n    protected _timbreFiscalDigital!: CNodeInterface;\n\n    protected _qrUrl!: string;\n\n    protected _tfdSourceString!: string;\n\n    protected _logo: string | undefined;\n\n    protected _additionalFields: { title: string; value: string }[] | undefined;\n\n    protected _additionalFieldsUP: { title: string; value: string }[] | undefined;\n\n    public emisor(): CNodeInterface {\n        return this._emisor;\n    }\n\n    public receptor(): CNodeInterface {\n        return this._receptor;\n    }\n\n    public timbreFiscalDigital(): CNodeInterface {\n        return this._timbreFiscalDigital;\n    }\n\n    public qrUrl(): string {\n        return this._qrUrl;\n    }\n\n    public tfdSourceString(): string {\n        return this._tfdSourceString;\n    }\n\n    public logo(): string | undefined {\n        return this._logo;\n    }\n\n    public additionalFields(): { title: string; value: string }[] | undefined {\n        return this._additionalFields;\n    }\n\n    public additionalFieldsUP(): { title: string; value: string }[] | undefined {\n        return this._additionalFieldsUP;\n    }\n\n    public buildUrlQr(node: CNodeInterface): void {\n        const rawString = XmlNodeUtils.nodeToXmlString(node, true);\n        const document = getParser().parseFromString(rawString, 'text/xml');\n        try {\n            this._qrUrl = new DiscoverExtractor().extract(document);\n        } catch (e) {\n            // not generated qrURL\n        }\n    }\n}\n","import { CNodeInterface } from '@nodecfdi/cfdiutils-common';\nimport { AbstractInvoiceData } from './abstract-invoice-data';\n\nexport class CfdiData extends AbstractInvoiceData {\n    private readonly _comprobante: CNodeInterface;\n\n    private readonly _address: string | undefined;\n\n    constructor(\n        comprobante: CNodeInterface,\n        qrUrl: string,\n        tfdSourceString: string,\n        logo?: string,\n        address?: string,\n        additionalFields?: { title: string; value: string }[],\n        additionalFieldsUP?: { title: string; value: string }[]\n    ) {\n        super();\n        const emisor = comprobante.searchNode('cfdi:Emisor');\n        if (!emisor) {\n            throw new Error('El CFDI no contiene nodo emisor');\n        }\n        const receptor = comprobante.searchNode('cfdi:Receptor');\n        if (!receptor) {\n            throw new Error('El CFDI no contiene nodo receptor');\n        }\n        const timbreFiscalDigital = comprobante.searchNode('cfdi:Complemento', 'tfd:TimbreFiscalDigital');\n        if (!timbreFiscalDigital) {\n            throw new Error('El CFDI no contiene complemento de timbre fiscal digital');\n        }\n\n        this._comprobante = comprobante;\n        this._emisor = emisor;\n        this._receptor = receptor;\n        this._timbreFiscalDigital = timbreFiscalDigital;\n        this._qrUrl = qrUrl;\n        this._tfdSourceString = tfdSourceString;\n        this._logo = logo;\n        this._address = address;\n        this._additionalFields = additionalFields;\n        this._additionalFieldsUP = additionalFieldsUP;\n        if (this._qrUrl.trim().length === 0) {\n            this.buildUrlQr(this._comprobante);\n        }\n    }\n\n    public comprobante(): CNodeInterface {\n        return this._comprobante;\n    }\n\n    public address(): string | undefined {\n        return this._address;\n    }\n}\n","import { CNodeInterface } from '@nodecfdi/cfdiutils-common';\nimport { AbstractInvoiceData } from './abstract-invoice-data';\n\nexport class RetencionesData extends AbstractInvoiceData {\n    private readonly _retenciones: CNodeInterface;\n\n    private readonly _periodo: CNodeInterface;\n\n    private readonly _totales: CNodeInterface;\n\n    constructor(\n        retenciones: CNodeInterface,\n        qrUrl: string,\n        tfdSourceString: string,\n        logo?: string,\n        additionalFields?: { title: string; value: string }[],\n        additionalFieldsUP?: { title: string; value: string }[]\n    ) {\n        super();\n        const emisor = retenciones.searchNode('retenciones:Emisor');\n        if (!emisor) {\n            throw new Error('La factura de retenciones no contiene nodo emisor');\n        }\n        const receptor = retenciones.searchNode('retenciones:Receptor');\n        if (!receptor) {\n            throw new Error('La factura de retenciones no contiene nodo receptor');\n        }\n        const periodo = retenciones.searchNode('retenciones:Periodo');\n        if (!periodo) {\n            throw new Error('La factura de retenciones no contiene nodo periodo');\n        }\n        const totales = retenciones.searchNode('retenciones:Totales');\n        if (!totales) {\n            throw new Error('La factura de retenciones no contiene nodo totales');\n        }\n        const timbreFiscalDigital = retenciones.searchNode('retenciones:Complemento', 'tfd:TimbreFiscalDigital');\n        if (!timbreFiscalDigital) {\n            throw new Error('La factura de retenciones no contiene complemento de timbre fiscal digital');\n        }\n\n        this._retenciones = retenciones;\n        this._emisor = emisor;\n        this._receptor = receptor;\n        this._periodo = periodo;\n        this._totales = totales;\n        this._timbreFiscalDigital = timbreFiscalDigital;\n        this._qrUrl = qrUrl;\n        this._tfdSourceString = tfdSourceString;\n        this._logo = logo;\n        this._additionalFields = additionalFields;\n        this._additionalFieldsUP = additionalFieldsUP;\n        if (this._qrUrl.trim().length === 0) {\n            this.buildUrlQr(this._retenciones);\n        }\n    }\n\n    public retenciones(): CNodeInterface {\n        return this._retenciones;\n    }\n\n    public periodo(): CNodeInterface {\n        return this._periodo;\n    }\n\n    public totales(): CNodeInterface {\n        return this._totales;\n    }\n}\n","const getGroupToCurrency = (group: string): string => {\n    // necessary arrays needed to convert from numbers to currency\n    const basics = [\n        'cero',\n        'un',\n        'dos',\n        'tres',\n        'cuatro',\n        'cinco',\n        'seis',\n        'siete',\n        'ocho',\n        'nueve',\n        'diez',\n        'once',\n        'doce',\n        'trece',\n        'catorce',\n        'quince'\n    ];\n    const teens = [\n        '',\n        'dieci',\n        'veinti',\n        'treinta',\n        'cuarenta',\n        'cincuenta',\n        'sesenta',\n        'setenta',\n        'ochenta',\n        'noventa'\n    ];\n    const hundreds = [\n        '',\n        'ciento',\n        'doscientos',\n        'trescientos',\n        'cuatrocientos',\n        'quinientos',\n        'seiscientos',\n        'setecientos',\n        'ochocientos',\n        'novecientos'\n    ];\n    // variable used to temporarily store currency\n    let toCurrency = '';\n    // handle hundreds\n    if (group.length === 3) {\n        switch (parseInt(group, 10)) {\n            case 100:\n                return 'cien ';\n            case 0:\n                return '';\n            default:\n                toCurrency += `${hundreds[parseInt(group[0], 10)]} `;\n        }\n        group = group.substring(1, 3);\n    }\n    // handle teens and 'basic' numbers\n    if (parseInt(group, 10) <= 15) {\n        // if group is less than 15, select from basics array\n        if (group === '00') {\n            return toCurrency;\n        }\n        toCurrency += `${basics[parseInt(group, 10)]} `;\n    } else {\n        // else look for the number in both teens and basics arrays\n        const zeroAtTheEnd = group[1] === '0';\n        switch (parseInt(group, 10)) {\n            case 20:\n                return `${toCurrency}veinte `;\n            default:\n                toCurrency += `${\n                    teens[parseInt(group[0], 10)] +\n                    (parseInt(group[0], 10) >= 3 && !zeroAtTheEnd ? ' y ' : '') +\n                    (zeroAtTheEnd ? '' : basics[parseInt(group[1], 10)])\n                } `;\n        }\n    }\n\n    return toCurrency;\n};\n\nconst toCurrency = (num: number, moneda?: string): string => {\n    // number to string\n    const number = num.toFixed(2);\n    // separate decimals (only 2) and integers\n    let integers = number.substring(0, number.indexOf('.'));\n    const decimals = number.substring(number.indexOf('.') + 1, number.length);\n    const monedaName = !moneda || moneda === 'MXN' ? 'M.N.' : moneda;\n    // initialize string to store currency\n    let numberToCurrency = '';\n    // some helpful variables\n    let noThousands = false;\n    let noHundreds = false;\n    let thousandsOfMillions = false;\n    // Maximum supported number is 999,999,999,999.99\n    if (integers.length <= 12) {\n        // evaluate each group of 3 digits (hundreds, thousands, millions, thousands of millions)\n        // evaluate thousands of millions\n        if (integers.length === 12 || integers.length === 11 || integers.length === 10) {\n            const group = integers.substring(0, integers.length - 9);\n            thousandsOfMillions = true;\n            switch (parseInt(group, 10)) {\n                /* istanbul ignore next */\n                case 0:\n                    break;\n                case 1:\n                    numberToCurrency += 'mil ';\n                    break;\n                default:\n                    numberToCurrency += `${getGroupToCurrency(group)}mil `;\n            }\n            integers = integers.substring(integers.length - 9, integers.length);\n        }\n        // evaluate millions\n        if (integers.length === 9 || integers.length === 8 || integers.length === 7) {\n            const group = integers.substring(0, integers.length - 6);\n            numberToCurrency += getGroupToCurrency(group);\n            if (!thousandsOfMillions && parseInt(group, 10) === 1) {\n                numberToCurrency += 'millón ';\n            } else {\n                numberToCurrency += 'millones ';\n            }\n            integers = integers.substring(integers.length - 6, integers.length);\n        }\n        // evaluate thousands\n        if (integers.length === 6 || integers.length === 5 || integers.length === 4) {\n            const group = integers.substring(0, integers.length - 3);\n            noThousands = parseInt(group, 10) === 0;\n            switch (parseInt(group, 10)) {\n                case 0:\n                    break;\n                case 1:\n                    numberToCurrency += 'mil ';\n                    break;\n                default:\n                    numberToCurrency += `${getGroupToCurrency(group)}mil `;\n            }\n            integers = integers.substring(integers.length - 3, integers.length);\n        }\n        // evaluate hundreds\n        noHundreds = parseInt(integers, 10) === 0;\n        numberToCurrency += getGroupToCurrency(integers);\n        numberToCurrency += `${\n            (noThousands && noHundreds ? 'de ' : '') + (numberToCurrency === 'un ' ? 'peso ' : 'pesos ') + decimals\n        }/100 ${monedaName}`;\n\n        return numberToCurrency.toUpperCase();\n    } else {\n        throw new Error('El número es demasiado grande.');\n    }\n};\n\nconst formatCurrency = (currency: number | string): string => {\n    if (typeof currency === 'string') {\n        currency = Number(currency);\n    }\n\n    const number = Number.isNaN(currency) ? 0 : Number(currency);\n\n    return Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', currencyDisplay: 'symbol' }).format(number);\n};\n\nexport { toCurrency, formatCurrency };\n","const breakEveryNCharacters = (str: string, n = 86): string => {\n    const arr = str.match(new RegExp(`.{1,${n}}`, 'g'));\n    let result = str;\n    if (arr) {\n        result = arr.reduce((a, b) => {\n            return `${a}\\n${b}`;\n        });\n    }\n\n    return result;\n};\n\nexport { breakEveryNCharacters };\n","export class PdfmakeNotFound extends Error {\n    constructor(msg: string) {\n        super(msg);\n        this.name = 'PdfmakeNotFound';\n    }\n}\n","import { BufferOptions, CustomTableLayout, TDocumentDefinitions, TFontDictionary } from 'pdfmake/interfaces';\nimport { PdfmakeNotFound } from './exceptions/pdfmake-not-found';\n\nexport interface PdfKitDocument extends NodeJS.ReadableStream {\n    end(): void;\n}\n\nexport interface TCreatedPdf {\n    download(cb?: () => void, options?: BufferOptions): void;\n    download(defaultFileName: string, cb?: () => void, options?: BufferOptions): void;\n    getBlob(cb: (result: Blob) => void, options?: BufferOptions): void;\n    getBase64(cb: (result: string) => void, options?: BufferOptions): void;\n    getBuffer(cb: (result: Buffer) => void, options?: BufferOptions): void;\n    getDataUrl(cb: (result: string) => void, options?: BufferOptions): void;\n    getStream(options?: BufferOptions): PdfKitDocument;\n    open(options?: BufferOptions, win?: Window | null): void;\n    print(options?: BufferOptions, win?: Window | null): void;\n}\n\nexport interface PdfMakeBrowser {\n    createPdf(\n        documentDefinitions: TDocumentDefinitions,\n        tableLayouts?: { [name: string]: CustomTableLayout },\n        fonts?: TFontDictionary,\n        vfs?: { [file: string]: string }\n    ): TCreatedPdf;\n}\n\nexport interface PdfMakeNode {\n    createPdfKitDocument(docDefinition: TDocumentDefinitions, options?: BufferOptions): PdfKitDocument;\n}\n\nlet _pdfmake: PdfMakeBrowser | PdfMakeNode | undefined;\n\nconst getPdfMake = <T extends PdfMakeBrowser | PdfMakeNode>(): T => {\n    if (!_pdfmake) {\n        throw new PdfmakeNotFound('No pdfmake was provided.');\n    }\n\n    return _pdfmake as T;\n};\n\nconst installPdfMake = (pdfMake: PdfMakeBrowser | PdfMakeNode): void => {\n    _pdfmake = pdfMake;\n};\n\nexport { getPdfMake, installPdfMake };\n","import { Style, TDocumentDefinitions } from 'pdfmake/interfaces';\nimport { BuilderInterface } from './builder-interface';\nimport { DocumentTranslatorInterface } from '../templates/document-translator-interface';\nimport { AbstractInvoiceData } from '../abstract-invoice-data';\nimport { getPdfMake, PdfMakeNode } from '../pdfmake-builder';\n\nexport class PdfMakerBuilder<T extends AbstractInvoiceData> implements BuilderInterface<T> {\n    private readonly _documentTranslator: DocumentTranslatorInterface<T>;\n\n    private readonly _defaultStyle: Style;\n\n    constructor(documentTranslator: DocumentTranslatorInterface<T>, defaultStyle?: Style) {\n        this._documentTranslator = documentTranslator;\n        if (!defaultStyle) {\n            defaultStyle = {\n                font: 'Roboto'\n            };\n        }\n        this._defaultStyle = defaultStyle;\n    }\n\n    public build(data: T, destination: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const fs = require('fs');\n            const pdfTemplate = this.buildPdf(data);\n            const pdfStream = getPdfMake<PdfMakeNode>().createPdfKitDocument(pdfTemplate, {});\n            const fileWriteStream = fs.createWriteStream(destination);\n            fileWriteStream.on('error', (err: Error) => {\n                fileWriteStream.end();\n\n                return reject(err);\n            });\n\n            pdfStream.pipe(fileWriteStream);\n            pdfStream.on('end', () => {\n                return resolve();\n            });\n            pdfStream.on('error', (err) => {\n                /* istanbul ignore next */\n                return reject(err);\n            });\n            pdfStream.end();\n        });\n    }\n\n    public buildBase64(data: T): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const pdfTemplate = this.buildPdf(data);\n            const pdfStream = getPdfMake<PdfMakeNode>().createPdfKitDocument(pdfTemplate, {});\n            const chunks: Uint8Array[] = [];\n            pdfStream.on('data', (chunk) => {\n                chunks.push(chunk);\n            });\n            pdfStream.on('end', () => {\n                return resolve(Buffer.concat(chunks).toString('base64'));\n            });\n            pdfStream.on('error', (err) => {\n                /* istanbul ignore next */\n                return reject(err);\n            });\n            pdfStream.end();\n        });\n    }\n\n    public buildPdf(data: T): TDocumentDefinitions {\n        return this._documentTranslator.translate(data, this._defaultStyle);\n    }\n}\n","/* istanbul ignore file */\nimport { Style, TDocumentDefinitions } from 'pdfmake/interfaces';\nimport { BuilderInterface } from './builder-interface';\nimport { DocumentTranslatorInterface } from '../templates/document-translator-interface';\nimport { AbstractInvoiceData } from '../abstract-invoice-data';\nimport { getPdfMake, PdfMakeBrowser } from '../pdfmake-builder';\n\nexport class PdfMakerBrowserBuilder<T extends AbstractInvoiceData> implements BuilderInterface<T> {\n    private _documentTranslator: DocumentTranslatorInterface<T>;\n\n    private readonly _defaultStyle: Style;\n\n    constructor(documentTranslator: DocumentTranslatorInterface<T>, defaultStyle?: Style) {\n        this._documentTranslator = documentTranslator;\n        if (!defaultStyle) {\n            defaultStyle = {\n                font: 'Roboto'\n            };\n        }\n        this._defaultStyle = defaultStyle;\n    }\n\n    public build(_data: T, _destination: string): Promise<void> {\n        console.warn('This method not permitted on browser');\n\n        return Promise.reject('Method not work on browser');\n    }\n\n    public buildBase64(data: T): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            try {\n                const pdfTemplate = this.buildPdf(data);\n                const pfdDocGenerator = getPdfMake<PdfMakeBrowser>().createPdf(pdfTemplate);\n                pfdDocGenerator.getBase64((pdfBase64) => {\n                    resolve(pdfBase64);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    public buildPdf(data: T): TDocumentDefinitions {\n        return this._documentTranslator.translate(data, this._defaultStyle);\n    }\n}\n","import { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { Content, TableCell } from 'pdfmake/interfaces';\nimport { formatCurrency } from '../../utils/currency';\n\nconst generateRelatedDocsContent = (doctoRelacionados: CNodes): TableCell[][] => {\n    const relatedDocsCells = doctoRelacionados.map<TableCell[]>((doc) => {\n        return [\n            doc.get('IdDocumento'),\n            doc.get('MetodoDePagoDR'),\n            doc.get('MonedaDR'),\n            doc.get('TipoCambioDR'),\n            doc.get('NumParcialidad'),\n            formatCurrency(doc.get('ImpSaldoAnt') || '0'),\n            formatCurrency(doc.get('ImpPagado') || '0'),\n            formatCurrency(doc.get('ImpSaldoInsoluto') || '0')\n        ];\n    });\n    relatedDocsCells.unshift([\n        'UUID',\n        'Método de Pago',\n        'Moneda',\n        'Tipo de Cambio',\n        'Num. Parcialidad',\n        'Importe Saldo Anterior',\n        'Importe Pagado',\n        'Importe Saldo Insoluto'\n    ]);\n    relatedDocsCells.unshift([\n        {\n            text: 'DOCUMENTOS RELACIONADOS',\n            style: 'tableHeader',\n            colSpan: 8,\n            alignment: 'center'\n        },\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {}\n    ]);\n\n    return relatedDocsCells;\n};\n\nconst usePago10Complement = (comprobante: CNodeInterface, currentContent: Content[]): void => {\n    // Verify if exists pago10 complement\n    const pago10 = comprobante.searchNode('cfdi:Complemento', 'pago10:Pagos');\n    if (!pago10) return;\n\n    const pagos = pago10.searchNodes('pago10:Pago');\n    if (pagos.length > 0) {\n        for (const pago of pagos) {\n            const doctoRelacionados = pago.searchNodes('pago10:DoctoRelacionado');\n            currentContent.push({\n                style: 'tableContent',\n                table: {\n                    widths: [95, '*', 95, '*'],\n                    body: [\n                        [\n                            {\n                                text: 'INFORMACIÓN DE PAGO',\n                                style: 'tableHeader',\n                                colSpan: 4,\n                                alignment: 'center'\n                            },\n                            {},\n                            {},\n                            {}\n                        ],\n                        ['FECHA:', pago.get('FechaPago'), 'FORMA PAGO:', pago.get('FormaDePagoP')],\n                        ['MONEDA:', pago.get('MonedaP'), 'MONTO:', formatCurrency(pago.get('Monto') || '0')],\n                        pago.offsetExists('TipoCambioP')\n                            ? ['TIPO DE CAMBIO:', pago.get('TipoCambioP'), '', '']\n                            : ['', '', '', '']\n                    ]\n                },\n                layout: 'lightHorizontalLines'\n            });\n            currentContent.push('\\n');\n            currentContent.push({\n                style: 'tableList',\n                table: {\n                    widths: ['*', 'auto', 'auto', 30, 20, 'auto', 'auto', 'auto'],\n                    body: generateRelatedDocsContent(doctoRelacionados)\n                },\n                layout: {\n                    fillColor(i: number): string | null {\n                        return i % 2 !== 0 ? '#CCCCCC' : null;\n                    }\n                }\n            });\n            currentContent.push('\\n');\n        }\n    }\n};\n\nexport { usePago10Complement };\n","import { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { Content, TableCell } from 'pdfmake/interfaces';\nimport { formatCurrency } from '../../utils/currency';\n\nconst generateRelatedDocsContent = (doctoRelacionados: CNodes): TableCell[][] => {\n    const relatedDocsCells = doctoRelacionados.map<TableCell[]>((doc) => {\n        return [\n            doc.get('IdDocumento'),\n            `${doc.get('Serie')}/${doc.get('Folio')}`,\n            doc.get('MonedaDR'),\n            doc.get('EquivalenciaDR'),\n            doc.get('NumParcialidad'),\n            formatCurrency(doc.get('ImpSaldoAnt') || '0'),\n            formatCurrency(doc.get('ImpPagado') || '0'),\n            formatCurrency(doc.get('ImpSaldoInsoluto') || '0')\n        ];\n    });\n    relatedDocsCells.unshift([\n        'UUID',\n        'Serie / Folio',\n        'Moneda',\n        'Tipo de Cambio',\n        'Num. Parcialidad',\n        'Importe Saldo Anterior',\n        'Importe Pagado',\n        'Importe Saldo Insoluto'\n    ]);\n    relatedDocsCells.unshift([\n        {\n            text: 'DOCUMENTOS RELACIONADOS',\n            style: 'tableHeader',\n            colSpan: 8,\n            alignment: 'center'\n        },\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {}\n    ]);\n\n    return relatedDocsCells;\n};\n\nconst checkAndAddTotal = (totales: CNodeInterface, attribute: string, rowToInsert: TableCell[]): void => {\n    if (totales.offsetExists(attribute)) {\n        rowToInsert.push({\n            text: `${attribute}: ${totales.get(attribute)}`,\n            fontSize: 7\n        });\n    }\n};\n\nconst generateTotalesInfoContent = (totales: CNodeInterface): TableCell[][] => {\n    const totalesCells: TableCell[][] = [];\n\n    const firstRow: TableCell[] = [];\n    const secondRow: TableCell[] = [];\n\n    checkAndAddTotal(totales, 'TotalRetencionesIVA', firstRow);\n    checkAndAddTotal(totales, 'TotalRetencionesISR', firstRow);\n    checkAndAddTotal(totales, 'TotalRetencionesIEPS', firstRow);\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVA16', firstRow);\n    checkAndAddTotal(totales, 'TotalTrasladosImpuestoIVA16', firstRow);\n\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVA8', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosImpuestoIVA8', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVA0', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosImpuestoIVA0', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVAExento', secondRow);\n\n    totalesCells.push([\n        {\n            text: 'Totales',\n            colSpan: 2,\n            alignment: 'center',\n            bold: true,\n            border: [true, true, false, true]\n        },\n        {},\n        {\n            text: `Monto Total: ${formatCurrency(totales.get('MontoTotalPagos'))}`,\n            colSpan: 3,\n            alignment: 'center',\n            bold: true,\n            border: [false, true, true, true]\n        },\n        {},\n        {}\n    ]);\n\n    if (firstRow.length > 0) {\n        const limit = 5 - firstRow.length;\n        for (let i = 0; i < limit; i++) {\n            firstRow.push({});\n        }\n        totalesCells.push(firstRow);\n    }\n\n    if (secondRow.length > 0) {\n        const limit = 5 - secondRow.length;\n        for (let i = 0; i < limit; i++) {\n            secondRow.push({});\n        }\n        totalesCells.push(secondRow);\n    }\n\n    return totalesCells;\n};\n\nconst usePago20Complement = (comprobante: CNodeInterface, currentContent: Content[]): void => {\n    // Verify if exists pago20 complement\n    const pago20 = comprobante.searchNode('cfdi:Complemento', 'pago20:Pagos');\n    if (!pago20) return;\n\n    const totales = pago20.searchNode('pago20:Totales');\n    const pagos = pago20.searchNodes('pago20:Pago');\n\n    if (pagos.length > 0 && totales !== undefined) {\n        currentContent.push({\n            style: 'tableContent',\n            table: {\n                widths: ['20%', '20%', '20%', '20%', '20%'],\n                body: generateTotalesInfoContent(totales)\n            }\n        });\n        currentContent.push('\\n');\n        for (const pago of pagos) {\n            const doctoRelacionados = pago.searchNodes('pago20:DoctoRelacionado');\n            currentContent.push({\n                style: 'tableContent',\n                table: {\n                    widths: [95, '*', 95, '*'],\n                    body: [\n                        [\n                            {\n                                text: 'INFORMACIÓN DE PAGO',\n                                style: 'tableHeader',\n                                colSpan: 4,\n                                alignment: 'center'\n                            },\n                            {},\n                            {},\n                            {}\n                        ],\n                        ['FECHA:', pago.get('FechaPago'), 'FORMA PAGO:', pago.get('FormaDePagoP')],\n                        ['MONEDA:', pago.get('MonedaP'), 'MONTO:', formatCurrency(pago.get('Monto') || '0')],\n                        pago.offsetExists('TipoCambioP')\n                            ? ['TIPO DE CAMBIO:', pago.get('TipoCambioP'), {}, {}]\n                            : [{}, {}, {}, {}]\n                    ]\n                },\n                layout: 'lightHorizontalLines'\n            });\n            currentContent.push({\n                style: 'tableList',\n                table: {\n                    widths: ['*', 'auto', 'auto', 25, 20, 'auto', 'auto', 'auto'],\n                    body: generateRelatedDocsContent(doctoRelacionados)\n                },\n                layout: {\n                    fillColor(i: number): string | null {\n                        return i % 2 !== 0 ? '#CCCCCC' : null;\n                    }\n                }\n            });\n            currentContent.push('\\n');\n            currentContent.push('\\n');\n        }\n    }\n};\n\nexport { usePago20Complement };\n","import { CNodeInterface } from '@nodecfdi/cfdiutils-common';\nimport { Content, TableCell, TableLayout } from 'pdfmake/interfaces';\nimport { formatCurrency } from '../../utils/currency';\n\nconst tableLayoutBordered = (): TableLayout => {\n    return {\n        hLineWidth: (i, node): number => {\n            if (i === 0 || i === node.table.body.length) {\n                return 0.8;\n            }\n\n            return i === node.table.headerRows ? 0.8 : 0.5;\n        },\n        vLineWidth: (i, node): number => {\n            return i === 0 || i === node.table.widths?.length ? 0.8 : 0;\n        },\n        hLineColor: (i, node): string => {\n            return i === 0 || i === node.table.body.length ? 'black' : 'gray';\n        },\n        paddingLeft(i): number {\n            return i === 0 ? 0 : 8;\n        },\n        paddingRight(i, node): number {\n            return i === (node.table.widths?.length || 0) - 1 ? 0 : 8;\n        }\n    };\n};\n\nconst useImpLocal10Complement = (comprobante: CNodeInterface, currentContent: Content[]): void => {\n    // Verify if exists ImpLocal10 complement\n    const impLocal10 = comprobante.searchNode('cfdi:Complemento', 'implocal:ImpuestosLocales');\n    if (!impLocal10) return;\n\n    const bodyImpLocal10: TableCell[][] = [];\n\n    // Header imp local\n    bodyImpLocal10.push([\n        {\n            text: 'COMPLEMENTO IMPUESTOS LOCALES',\n            style: 'tableHeader',\n            colSpan: 4,\n            alignment: 'center'\n        },\n        {},\n        {},\n        {}\n    ]);\n\n    // SubHeader with values on implocal10\n    bodyImpLocal10.push([\n        'TOTAL RETENCIONES:',\n        formatCurrency(impLocal10.get('TotaldeRetenciones')),\n        'TOTAL TRASLADOS:',\n        formatCurrency(impLocal10.get('TotaldeTraslados'))\n    ]);\n\n    // if exists node retenciones locales\n    const retencionesLocales = impLocal10.searchNode('implocal:RetencionesLocales');\n    if (retencionesLocales) {\n        bodyImpLocal10.push([\n            {\n                style: 'tableContent',\n                margin: 3,\n                table: {\n                    widths: ['*', '*', '*'],\n                    body: [\n                        [\n                            {\n                                text: 'RETENCIONES LOCALES',\n                                style: 'tableHeader',\n                                colSpan: 3,\n                                alignment: 'center'\n                            },\n                            {},\n                            {}\n                        ],\n                        [\n                            {\n                                text: 'IMP LOCAL RETENIDO',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'TASA DE RETENCIÓN',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'IMPORTE',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            }\n                        ],\n                        [\n                            retencionesLocales.get('ImpLocRetenido'),\n                            retencionesLocales.get('TasadeRetencion'),\n                            formatCurrency(retencionesLocales.get('Importe'))\n                        ]\n                    ]\n                },\n                layout: tableLayoutBordered(),\n                colSpan: 4\n            },\n            {},\n            {},\n            {}\n        ]);\n    }\n\n    // if exists node traslados locales\n    const trasladosLocales = impLocal10.searchNode('implocal:TrasladosLocales');\n    if (trasladosLocales) {\n        bodyImpLocal10.push([\n            {\n                style: 'tableContent',\n                margin: 3,\n                table: {\n                    widths: ['*', '*', '*'],\n                    body: [\n                        [\n                            {\n                                text: 'TRASLADOS LOCALES',\n                                style: 'tableHeader',\n                                colSpan: 3,\n                                alignment: 'center'\n                            },\n                            {},\n                            {}\n                        ],\n                        [\n                            {\n                                text: 'IMP LOCAL TRASLADADO',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'TASA DE TRASLADO',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'IMPORTE',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            }\n                        ],\n                        [\n                            trasladosLocales.get('ImpLocTrasladado'),\n                            trasladosLocales.get('TasadeTraslado'),\n                            formatCurrency(trasladosLocales.get('Importe'))\n                        ]\n                    ]\n                },\n                layout: tableLayoutBordered(),\n                colSpan: 4\n            },\n            {},\n            {},\n            {}\n        ]);\n    }\n\n    currentContent.push({\n        style: 'tableContent',\n        table: {\n            widths: [95, '*', 95, '*'],\n            body: bodyImpLocal10\n        },\n        layout: tableLayoutBordered()\n    });\n    currentContent.push('\\n');\n};\n\nexport { useImpLocal10Complement };\n","import {\n    Column,\n    Content,\n    ContentColumns,\n    ContentTable,\n    Style,\n    TableCell,\n    TDocumentDefinitions\n} from 'pdfmake/interfaces';\nimport { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { DocumentTranslatorInterface } from './document-translator-interface';\nimport { CfdiData } from '../cfdi-data';\nimport { formatCurrency, toCurrency } from '../utils/currency';\nimport { breakEveryNCharacters } from '../utils/break-characters';\nimport { usePago10Complement } from './complements/pago10-complement';\nimport { usePago20Complement } from './complements/pago20-complement';\nimport { useImpLocal10Complement } from './complements/imp-local10-complement';\n\nexport class GenericCfdiTranslator implements DocumentTranslatorInterface<CfdiData> {\n    protected generateFooter(version: string, uuid: string, currentPage: number, pageCount: number): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: `Este documento es una representación impresa de un Comprobante Fiscal Digital a través de Internet versión ${version}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    [\n                        {\n                            text: `UUID: ${uuid} - Página ${currentPage} de ${pageCount}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ]\n                ]\n            },\n            layout: 'noBorders'\n        };\n    }\n\n    protected generateTopContent(comprobante: CNodeInterface, logo?: string): Content {\n        const header: ContentColumns = {\n            columns: [\n                {\n                    width: '*',\n                    alignment: 'left',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [['']]\n                    },\n                    layout: 'lightHorizontalLines'\n                },\n                {\n                    width: 'auto',\n                    alignment: 'center',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['auto', 'auto'],\n                        body: [\n                            ['SERIE:',{text:comprobante.get('Serie'), style: 'serieAndFolio'}],\n                            ['FOLIO:', {text:comprobante.get('Folio'), style: 'serieAndFolio'}],\n                            ['FECHA:', comprobante.get('Fecha')],\n                            ['EXPEDICIÓN:', comprobante.get('LugarExpedicion')],\n                            ['COMPROBANTE:', comprobante.get('TipoDeComprobante')],\n                            ['VERSIÓN:', comprobante.get('Version')]\n                        ]\n                    },\n                    layout: 'lightHorizontalLines'\n                }\n            ]\n        };\n        if (logo) {\n            //Se modifico para poner el logo de salsa de [80, 80]\n            (header.columns[0] as ContentTable).table.body[0][0] = { image: logo, fit: [302, 90] };\n            (header.columns[0] as ContentTable).table.widths = ['*'];\n        }\n\n        return header;\n    }\n\n    protected generateEmisorContent(emisor: CNodeInterface): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: 'EMISOR',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'left'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    ['NOMBRE:', emisor.get('Nombre'), 'RFC:', emisor.get('Rfc')],\n                    ['REGIMEN FISCAL:', { colSpan: 3, text: emisor.get('RegimenFiscal') }, {}, {}]\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected generateAddress(receptor: CNodeInterface, address?: string): TableCell[][] {\n        const tableCell: TableCell[][] = [];\n        const cellAddress: TableCell[] = [];\n        if (address || receptor.offsetExists('DomicilioFiscalReceptor')) {\n            cellAddress.push('DOMICILIO:', `${address ? address + ' ' : ''}${receptor.get('DomicilioFiscalReceptor')}`);\n        }\n        cellAddress.push('USO CFDI', {\n            colSpan: address || receptor.offsetExists('DomicilioFiscalReceptor') ? 1 : 3,\n            text: receptor.get('UsoCFDI')\n        });\n        tableCell.push(cellAddress);\n        if (receptor.offsetExists('ResidenciaFiscal') && receptor.offsetExists('NumRegIdTrib')) {\n            tableCell.push([\n                'RESIDENCIA FISCAL:',\n                receptor.get('ResidenciaFiscal'),\n                'NUMERO ID TRIB.:',\n                receptor.get('NumRegIdTrib')\n            ]);\n        }\n\n        return tableCell;\n    }\n\n    protected generateReceptorContent(receptor: CNodeInterface, address?: string): Content {\n        const receptorContent: Content = {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: 'RECEPTOR',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'left'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    ['NOMBRE:', receptor.get('Nombre'), 'RFC:', receptor.get('Rfc')],\n                    ...this.generateAddress(receptor, address)\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        };\n\n        if (receptor.offsetExists('RegimenFiscalReceptor')) {\n            receptorContent.table.body.push([\n                'REGIMEN FISCAL',\n                {\n                    colSpan: 3,\n                    text: receptor.get('RegimenFiscalReceptor')\n                },\n                {},\n                {}\n            ]);\n        }\n\n        return receptorContent;\n    }\n\n    protected useGlobalInformation(comprobante: CNodeInterface, currentContent: Content[]): void {\n        const globalInformation = comprobante.searchNode('cfdi:InformacionGlobal');\n        if (globalInformation === undefined) return;\n        currentContent.push({\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*'],\n                body: [\n                    [\n                        {\n                            text: 'INFORMACIÓN GLOBAL',\n                            style: 'tableHeader',\n                            colSpan: 3,\n                            alignment: 'left'\n                        },\n                        {},\n                        {}\n                    ],\n                    [\n                        `Periodicidad: ${globalInformation.get('Periodicidad')}`,\n                        `Meses: ${globalInformation.get('Meses')}`,\n                        `Año: ${globalInformation.get('Año')}`\n                    ]\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        });\n        currentContent.push('\\n');\n    }\n\n    protected generateGeneralInvoiceInfoContent(comprobante: CNodeInterface): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: [95, '*', 95, '*'],\n                body: [\n                    [\n                        {\n                            text: 'DATOS GENERALES DEL COMPROBANTE',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'left'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    ['MONEDA:', comprobante.get('Moneda'), 'FORMA PAGO:', comprobante.get('FormaPago')],\n                    [\n                        'METODO DE PAGO:',\n                        comprobante.get('MetodoPago'),\n                        'CONDICIONES DE PAGO:',\n                        comprobante.get('CondicionesDePago')\n                    ]\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected generateImpuestos(concepto: CNodeInterface): Content[] {\n        const impuestosContent: Content[] = [];\n        const traslados = concepto.searchNodes('cfdi:Impuestos', 'cfdi:Traslados', 'cfdi:Traslado');\n        const retenciones = concepto.searchNodes('cfdi:Impuestos', 'cfdi:Retenciones', 'cfdi:Retencion');\n        if (traslados.length > 0) {\n            impuestosContent.push('Traslados');\n            const contentT = traslados.map<TableCell[]>((traslado) => {\n                return [\n                    traslado.get('Impuesto'),\n                    traslado.get('TipoFactor') === 'Exento' ? 'EXENTO' : formatCurrency(traslado.get('Importe'))\n                ];\n            });\n            impuestosContent.push({\n                table: {\n                    body: contentT\n                },\n                layout: 'noBorders'\n            });\n        }\n        if (retenciones.length > 0) {\n            impuestosContent.push('Retenciones');\n            const contentR = retenciones.map<TableCell[]>((retencion) => {\n                return [retencion.get('Impuesto'), formatCurrency(retencion.get('Importe'))];\n            });\n            impuestosContent.push({\n                table: {\n                    body: contentR\n                },\n                layout: 'noBorders'\n            });\n        }\n\n        return impuestosContent;\n    }\n\n    protected generateConceptsContent(conceptos: CNodes): Content {\n        const rowsConceptos = conceptos.map<TableCell[]>((concepto) => {\n            return [\n                concepto.get('ClaveProdServ'),\n                concepto.get('Cantidad'),\n                concepto.get('ClaveUnidad'),\n                concepto.get('NoIdentificacion') || '(Ninguno)',\n                concepto.get('Descripcion'),\n                formatCurrency(concepto.get('ValorUnitario')),\n                formatCurrency(concepto.get('Descuento')),\n                {\n                    colSpan: 2,\n                    stack: this.generateImpuestos(concepto)\n                },\n                '',\n                formatCurrency(concepto.get('Importe'))\n            ];\n        });\n\n        rowsConceptos.unshift([\n            'ClaveProdServ',\n            'Cant',\n            'Clave Unidad',\n            'Identificación',\n            'Descripción',\n            'Valor Unitario',\n            'Descuento',\n            {\n                colSpan: 2,\n                text: 'Impuesto'\n            },\n            '',\n            'Importe'\n        ]);\n\n        return {\n            style: 'tableList',\n            table: {\n                widths: ['auto', 'auto', 'auto', 'auto', '*', 'auto', 'auto', 'auto', 'auto', 'auto'],\n                body: rowsConceptos\n            },\n            layout: {\n                fillColor(i): string | null {\n                    return i === 0 ? '#CCCCCC' : null;\n                }\n            }\n        };\n    }\n\n    protected generateCurrencyRelatedInfo(comprobante: CNodeInterface): Content {\n        const totalImpuestosTrasladados = comprobante.searchAttribute('cfdi:Impuestos', 'TotalImpuestosTrasladados');\n        const totalImpuestosRetenidos = comprobante.searchAttribute('cfdi:Impuestos', 'TotalImpuestosRetenidos');\n        const totalTasasTraslados = comprobante.searchNodes(\"cfdi:Impuestos\", \"cfdi:Traslados\", \"cfdi:Traslado\");\n        const contentColumns: Column[] = [];\n        const relatedInfoAndImport: Column[] = [];\n        if (comprobante.get('TipoDeComprobante') !== 'P') {\n            relatedInfoAndImport.push({\n                fontSize: 7,\n                margin: [0, 5, 0, 0],\n                columns: [\n                    { width: 'auto', text: 'IMPORTE CON LETRA:', margin: [0, 0, 5, 0] },\n                    {\n                        width: 'auto',\n                        text: toCurrency(parseFloat(comprobante.get('Total') || '0'), comprobante.get('Moneda'))\n                    },\n                    { width: '*', text: '' }\n                ]\n            });\n        }\n        if (comprobante.get('Version') === '3.3') {\n            const relacionados = comprobante.searchNode('cfdi:CfdiRelacionados');\n            if (relacionados) {\n                const uuidsArray = relacionados.searchNodes('cfdi:CfdiRelacionado').map((relacionado) => {\n                    return [`UUID: ${relacionado.get('UUID')}`];\n                });\n\n                relatedInfoAndImport.push({\n                    fontSize: 7,\n                    margin: [0, 5, 0, 0],\n                    table: {\n                        widths: ['*'],\n                        body: [\n                            [\n                                {\n                                    text: `CFDIS RELACIONADOS - TIPO RELACIÓN ${relacionados.get('TipoRelacion')}`,\n                                    fillColor: '#CCCCCC'\n                                }\n                            ],\n                            ...uuidsArray\n                        ]\n                    }\n                });\n            }\n        } else {\n            const relacionados = comprobante.searchNodes('cfdi:CfdiRelacionados');\n            if (relacionados.length > 0) {\n                for (const relacionadosNode of relacionados) {\n                    const uuidsArray = relacionadosNode.searchNodes('cfdi:CfdiRelacionado').map((relacionado) => {\n                        return [`UUID: ${relacionado.get('UUID')}`];\n                    });\n\n                    relatedInfoAndImport.push({\n                        fontSize: 7,\n                        margin: [0, 5, 0, 0],\n                        table: {\n                            widths: ['*'],\n                            body: [\n                                [\n                                    {\n                                        text: `CFDIS RELACIONADOS - TIPO RELACIÓN ${relacionadosNode.get(\n                                            'TipoRelacion'\n                                        )}`,\n                                        fillColor: '#CCCCCC'\n                                    }\n                                ],\n                                ...uuidsArray\n                            ]\n                        }\n                    });\n                }\n            }\n        }\n        contentColumns.push(relatedInfoAndImport);\n        if (comprobante.get('TipoDeComprobante') !== 'P') {\n            contentColumns.push({\n                width: 'auto',\n                alignment: 'right',\n                style: 'tableContent',\n                margin: [10, 0, 0, 0],\n                table: {\n                    widths: ['auto', 'auto'],\n                    body: [\n                        ['SUBTOTAL:', { text: formatCurrency(comprobante.get('SubTotal')), fontSize: 9 }],\n                        ['DESCUENTO:', formatCurrency(comprobante.get('Descuento'))],\n                        [\"SUBTOTAL T16:\", formatCurrency(totalTasasTraslados[0]!=undefined ? totalTasasTraslados[0].get(\"Base\") : 0.00)],\n                        [\"SUBTOTAL T0:\", formatCurrency(totalTasasTraslados[1]!=undefined ? totalTasasTraslados[1].get(\"Base\") : 0.00)],\n                        ['TOTAL IMP. TRASLADADOS:', formatCurrency(totalImpuestosTrasladados)],\n                        ['TOTAL IMP. RETENIDOS:', formatCurrency(totalImpuestosRetenidos)],\n                        [\n                            {\n                                text: 'TOTAL:',\n                                fontSize: 11,\n                                bold: true\n                            },\n                            { text: formatCurrency(comprobante.get('Total')), fontSize: 11, bold: true }\n                        ]\n                    ]\n                },\n                layout: 'lightHorizontalLines'\n            });\n        }\n\n        return {\n            columns: contentColumns\n        };\n    }\n\n    protected generateStampContent(cfdiData: CfdiData): Content {\n        const comprobante = cfdiData.comprobante();\n        const tfd = cfdiData.timbreFiscalDigital();\n        const tfdSourceString = cfdiData.tfdSourceString();\n        const qrUrl = cfdiData.qrUrl();\n        const tfdCellsTable: TableCell[][] = [];\n        if (tfd) {\n            tfdCellsTable.push(\n                [\n                    {\n                        colSpan: 1,\n                        rowSpan: 8,\n                        qr: qrUrl,\n                        fit: 120\n                    },\n                    '',\n                    ''\n                ],\n                ['', 'NUMERO SERIE CERTIFICADO SAT', tfd.get('NoCertificadoSAT')],\n                ['', 'NUMERO SERIE CERTIFICADO EMISOR', comprobante.get('NoCertificado')],\n                ['', 'FECHA HORA CERTIFICACIÓN', tfd.get('FechaTimbrado')],\n                ['', 'FOLIO FISCAL UUID', tfd.get('UUID')],\n                ['', 'SELLO DIGITAL', breakEveryNCharacters(tfd.get('SelloCFD'), 86)],\n                ['', 'SELLO DEL SAT', breakEveryNCharacters(tfd.get('SelloSAT'), 86)]\n            );\n        }\n        tfdCellsTable.push([\n            '',\n            'CADENA ORIGINAL CC:',\n            {\n                text: breakEveryNCharacters(tfdSourceString, 86)\n            }\n        ]);\n\n        return {\n            style: 'tableSat',\n            table: {\n                widths: ['auto', 'auto', '*'],\n                body: tfdCellsTable\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected generateContent(cfdiData: CfdiData): Content {\n        const comprobante = cfdiData.comprobante();\n        const emisor = cfdiData.emisor();\n        const receptor = cfdiData.receptor();\n        const conceptos = comprobante.searchNodes('cfdi:Conceptos', 'cfdi:Concepto');\n        const additionalFields = cfdiData.additionalFields();\n        const additionalFields2 = cfdiData.additionalFieldsUP();\n\n        const content: Content[] = [];\n        content.push(this.generateTopContent(comprobante, cfdiData.logo()));\n        content.push('\\n');\n        content.push(this.generateEmisorContent(emisor));\n        content.push('\\n');\n        if (additionalFields2) {\n            additionalFields2.forEach((element) => {\n                content.push({\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [[{ text: element.title, style: 'tableHeader' }], [{text:element.value, style: 'infoHighlight'}]]\n                    },\n                    layout: 'lightHorizontalLines'\n                });\n                content.push('\\n');\n            });\n        }\n        \n        content.push(this.generateReceptorContent(receptor, cfdiData.address()));\n        content.push('\\n');\n        if (comprobante.get('TipoDeComprobante') !== 'P') {\n            this.useGlobalInformation(comprobante, content);\n            content.push(this.generateGeneralInvoiceInfoContent(comprobante));\n            content.push('\\n');\n        }\n        content.push(this.generateConceptsContent(conceptos));\n        content.push('\\n');\n        content.push(this.generateCurrencyRelatedInfo(comprobante));\n        content.push('\\n');\n\n        /** Area of complements */\n        usePago10Complement(comprobante, content);\n        usePago20Complement(comprobante, content);\n        useImpLocal10Complement(comprobante, content);\n        /** **/\n\n        if (additionalFields) {\n            additionalFields.forEach((element) => {\n                content.push({\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [[{ text: element.title, style: 'tableHeader' }], [{text:element.value, style: 'infoHighlight'}]]\n                    },\n                    layout: 'lightHorizontalLines'\n                });\n                content.push('\\n');\n            });\n        }\n\n        content.push(this.generateStampContent(cfdiData));\n\n        return content;\n    }\n\n    public translate(cfdiData: CfdiData, defaultStyle: Style): TDocumentDefinitions {\n        const comprobante = cfdiData.comprobante();\n        const tfd = cfdiData.timbreFiscalDigital();\n\n        return {\n            content: this.generateContent(cfdiData),\n            styles: {\n                tableHeader: {\n                    bold: true,\n                    fontSize: 10,\n                    color: 'black'\n                },\n                infoHighlight: {\n                    fontSize: 11,\n                    color: 'black'\n                },\n                //Se agrega estilo para los datos grandes de serie y folio\n                serieAndFolio: {\n                    bold: true,\n                    fontSize: 15,\n                    color: 'red'\n                },\n                tableContent: {\n                    fontSize: 8,\n                    color: 'black',\n                    alignment: 'left'\n                },\n                tableList: {\n                    fontSize: 7,\n                    color: 'black',\n                    alignment: 'center'\n                },\n                tableSat: {\n                    fontSize: 5,\n                    color: 'black',\n                    alignment: 'left'\n                }\n            },\n            defaultStyle,\n            footer: (currentPage, pageCount) =>\n                this.generateFooter(comprobante.get('Version'), tfd.get('UUID'), currentPage, pageCount)\n        };\n    }\n}\n","import {\n    Content,\n    ContentColumns,\n    ContentTable,\n    Style,\n    TableCell,\n    TableLayout,\n    TDocumentDefinitions\n} from 'pdfmake/interfaces';\nimport { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { DocumentTranslatorInterface } from './document-translator-interface';\nimport { RetencionesData } from '../retenciones-data';\nimport { breakEveryNCharacters } from '../utils/break-characters';\nimport { formatCurrency } from '../utils/currency';\n\nexport class GenericRetencionesTranslator implements DocumentTranslatorInterface<RetencionesData> {\n    public version = '1.0';\n\n    protected tableLayoutBordered(): TableLayout {\n        return {\n            hLineWidth: (i, node): number => {\n                if (i === 0 || i === node.table.body.length) {\n                    return 0.8;\n                }\n\n                return i === node.table.headerRows ? 0.8 : 0.5;\n            },\n            vLineWidth: (i, node): number => {\n                return i === 0 || i === node.table.widths?.length ? 0.8 : 0;\n            },\n            hLineColor: (i, node): string => {\n                return i === 0 || i === node.table.body.length ? 'black' : 'gray';\n            },\n            paddingLeft(i): number {\n                return i === 0 ? 0 : 8;\n            },\n            paddingRight(i, node): number {\n                return i === (node.table.widths?.length || 0) - 1 ? 0 : 8;\n            }\n        };\n    }\n\n    protected generateFooter(version: string, uuid: string, currentPage: number, pageCount: number): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: `Este documento es una representación impresa de un Comprobante Fiscal Digital por Internet que ampara Retenciones e Información de Pagos versión ${version}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    [\n                        {\n                            text: `UUID: ${uuid} - Página ${currentPage} de ${pageCount}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ]\n                ]\n            },\n            layout: 'noBorders'\n        };\n    }\n\n    protected generateTopContent(retenciones: CNodeInterface, logo?: string): Content {\n        const header: ContentColumns = {\n            columns: [\n                {\n                    width: '*',\n                    alignment: 'left',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [['']]\n                    },\n                    layout: 'lightHorizontalLines'\n                },\n                {\n                    width: 'auto',\n                    alignment: 'center',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['auto', 'auto'],\n                        body: [\n                            ['FOLIO:', retenciones.get('FolioInt')],\n                            ['FECHA:', retenciones.get('FechaExp')],\n                            ['COMPROBANTE:', 'RETENCIÓN'],\n                            ['VERSIÓN:', this.version]\n                        ]\n                    },\n                    layout: 'lightHorizontalLines'\n                }\n            ]\n        };\n        if (logo) {\n            (header.columns[0] as ContentTable).table.body[0][0] = { image: logo, fit: [80, 80] };\n            (header.columns[0] as ContentTable).table.widths = ['*'];\n        }\n\n        return header;\n    }\n\n    protected generateEmisorContent(emisor: CNodeInterface): Content {\n        const body: TableCell[][] = [];\n        body.push([\n            {\n                text: 'EMISOR',\n                style: 'tableHeader',\n                colSpan: 4,\n                alignment: 'left'\n            },\n            {},\n            {},\n            {}\n        ]);\n        body.push([\n            'NOMBRE:',\n            emisor.get('NomDenRazSocE'),\n            'RFC:',\n            emisor.get(this.version === '1.0' ? 'RFCEmisor' : 'RfcE')\n        ]);\n\n        if (this.version === '2.0') {\n            body.push(['REGIMEN FISCAL:', emisor.get('RegimenFiscalE'), '', '']);\n        }\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: body\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateReceptorContent(receptor: CNodeInterface): Content {\n        const nacionalidad = receptor.get(this.version === '1.0' ? 'Nacionalidad' : 'NacionalidadR');\n        const infoReceptor: TableCell[] = [];\n        let domicilioFiscal = '';\n        if (nacionalidad === 'Nacional') {\n            const nacional = receptor.searchNode('retenciones:Nacional');\n            if (nacional) {\n                infoReceptor.push(\n                    'NOMBRE:',\n                    nacional.get('NomDenRazSocR'),\n                    'RFC:',\n                    nacional.get(this.version === '1.0' ? 'RFCRecep' : 'RfcR')\n                );\n                domicilioFiscal = nacional.get('DomicilioFiscalR');\n            }\n        } else {\n            const extranjero = receptor.searchNode('retenciones:Extranjero');\n            if (extranjero) {\n                infoReceptor.push(\n                    'NOMBRE:',\n                    extranjero.get('NomDenRazSocR'),\n                    'NUM. REG. ID TRIB.:',\n                    extranjero.get(this.version === '1.0' ? 'NumRegIdTrib' : 'NumRegIdTribR')\n                );\n            }\n        }\n        const body: TableCell[][] = [];\n        body.push([\n            {\n                text: 'RECEPTOR',\n                style: 'tableHeader',\n                colSpan: 4,\n                alignment: 'left'\n            },\n            {},\n            {},\n            {}\n        ]);\n        body.push([\n            'NACIONALIDAD:',\n            nacionalidad,\n            this.version === '2.0' && nacionalidad === 'Nacional' ? 'DOMICILIO FISCAL:' : '',\n            this.version === '2.0' && nacionalidad === 'Nacional' ? domicilioFiscal : ''\n        ]);\n        body.push(infoReceptor);\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: body\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generatePeriodoContent(periodo: CNodeInterface, claveRet: string): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*', '*'],\n                body: [\n                    [\n                        {\n                            text: 'PERIODO MES INICIAL',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'PERIODO MES FINAL',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'PERIODO EJERCICIO ANUAL',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'TIPO DE RETENCION',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        }\n                    ],\n                    [\n                        periodo.get('MesIni'),\n                        periodo.get('MesFin'),\n                        periodo.get(this.version === '1.0' ? 'Ejerc' : 'Ejercicio'),\n                        claveRet\n                    ]\n                ]\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateImpuestosRetenidos(impuestosRetenidos: CNodeInterface[]): TableCell[][] {\n        const rowsRetenciones: TableCell[][] = [];\n        if (impuestosRetenidos.length > 0) {\n            rowsRetenciones.push([\n                {\n                    text: 'IMPUESTOS RETENIDOS',\n                    style: 'tableHeader',\n                    colSpan: 3,\n                    alignment: 'center'\n                },\n                {},\n                {}\n            ]);\n            rowsRetenciones.push([\n                {\n                    text: 'TIPO DE IMPUESTO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                {\n                    text: 'TIPO DE PAGO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                {\n                    text: 'MONTO RETENIDO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                }\n            ]);\n        }\n        impuestosRetenidos.forEach((impuestoRetenido) => {\n            rowsRetenciones.push([\n                impuestoRetenido.get(this.version === '1.0' ? 'Impuesto' : 'ImpuestoRet'),\n                impuestoRetenido.get('TipoPagoRet'),\n                formatCurrency(impuestoRetenido.get(this.version === '1.0' ? 'montoRet' : 'MontoRet'))\n            ]);\n        });\n\n        return rowsRetenciones;\n    }\n\n    protected generateTotales(totales: CNodeInterface): Content {\n        const impuestosRetenidos = totales.searchNodes('retenciones:ImpRetenidos');\n        const impuestosRetenidosBody: TableCell[][] = this.generateImpuestosRetenidos(impuestosRetenidos);\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*', '*'],\n                body: [\n                    [\n                        {\n                            text: 'TOTALES',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    [\n                        {\n                            text: 'MONTO TOTAL DE OPERACIÓN',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'MONTO TOTAL GRAVADO',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'MONTO TOTAL EXENTO',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'MONTO TOTAL RETENIDO',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        }\n                    ],\n                    [\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotOperacion' : 'MontoTotOperacion')),\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotGrav' : 'MontoTotGrav')),\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotExent' : 'MontoTotExent')),\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotRet' : 'MontoTotRet'))\n                    ],\n                    [\n                        {\n                            style: 'tableContent',\n                            margin: 5,\n                            colSpan: 4,\n                            table: {\n                                widths: ['*', '*', '*'],\n                                body: impuestosRetenidosBody\n                            },\n                            layout: this.tableLayoutBordered()\n                        },\n                        {},\n                        {},\n                        {}\n                    ]\n                ]\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateStampContent(data: RetencionesData): Content {\n        const retenciones = data.retenciones();\n        const tfd = data.timbreFiscalDigital();\n        const tfdVersion = tfd.get(this.version === '1.0' ? 'version' : 'Version');\n        const tfdSourceString = data.tfdSourceString();\n        const qrUrl = data.qrUrl();\n        const tfdCellsTable: TableCell[][] = [];\n        if (tfd) {\n            tfdCellsTable.push(\n                [\n                    {\n                        colSpan: 1,\n                        rowSpan: 8,\n                        qr: qrUrl,\n                        fit: 100\n                    },\n                    '',\n                    ''\n                ],\n                [\n                    '',\n                    'NUMERO SERIE CERTIFICADO SAT',\n                    tfd.get(tfdVersion === '1.0' ? 'noCertificadoSAT' : 'NoCertificadoSAT')\n                ],\n                [\n                    '',\n                    'NUMERO SERIE CERTIFICADO EMISOR',\n                    retenciones.get(this.version === '1.0' ? 'NumCert' : 'NoCertificado')\n                ],\n                ['', 'FECHA HORA CERTIFICACIÓN', tfd.get('FechaTimbrado')],\n                ['', 'FOLIO FISCAL UUID', tfd.get('UUID')],\n                [\n                    '',\n                    'SELLO DIGITAL',\n                    breakEveryNCharacters(tfd.get(tfdVersion === '1.0' ? 'selloCFD' : 'SelloCFD'), 86)\n                ],\n                [\n                    '',\n                    'SELLO DEL SAT',\n                    breakEveryNCharacters(tfd.get(tfdVersion === '1.0' ? 'selloSAT' : 'SelloSAT'), 86)\n                ]\n            );\n        }\n        tfdCellsTable.push([\n            '',\n            'CADENA ORIGINAL CC:',\n            {\n                text: breakEveryNCharacters(tfdSourceString, 86)\n            }\n        ]);\n\n        return {\n            style: 'tableSat',\n            table: {\n                widths: ['auto', 'auto', '*'],\n                body: tfdCellsTable\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected contentService(service: CNodeInterface): TableCell[][] {\n        const tableService: TableCell[][] = [];\n        // SubHeaders per service\n        tableService.push([\n            {\n                text: 'FORMA DE PAGO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            },\n            {\n                text: 'TIPO DE SERVICIO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            },\n            {\n                text: 'FECHA DE PAGO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            },\n            {\n                text: 'PRECIO DE SERVICIO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            }\n        ]);\n        tableService.push([\n            service.get('FormaPagoServ'),\n            service.get('TipoDeServ'),\n            service.get('FechaServ'),\n            formatCurrency(service.get('PrecioServSinIVA'))\n        ]);\n        if (service.offsetExists('SubTipServ') || service.offsetExists('RFCTerceroAutorizado')) {\n            tableService.push([\n                {\n                    text: 'SUBTIPO DE SERVICIO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                {\n                    text: 'RFC TERCERO AUTORIZADO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                '',\n                ''\n            ]);\n            tableService.push([service.get('SubTipServ'), service.get('RFCTerceroAutorizado'), '', '']);\n        }\n        const impuestosTrasladadosDelServicio = service.searchNode(\n            'plataformasTecnologicas:ImpuestosTrasladadosdelServicio'\n        );\n        const contribucionGubernamental = service.searchNode('plataformasTecnologicas:ContribucionGubernamental');\n        const comisionDelServicio = service.searchNode('plataformasTecnologicas:ComisionDelServicio');\n\n        if (impuestosTrasladadosDelServicio) {\n            tableService.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*', '*', '*', '*', '*'],\n                        body: [\n                            [\n                                {\n                                    text: 'IMPUESTOS TRASLADADOS DEL SERVICIO',\n                                    style: 'tableHeader',\n                                    colSpan: 5,\n                                    alignment: 'center'\n                                },\n                                {},\n                                {},\n                                {},\n                                {}\n                            ],\n                            [\n                                {\n                                    text: 'IMPUESTO BASE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPUESTO',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'TIPO FACTOR',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'TASA O CUOTA',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPORTE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                }\n                            ],\n                            [\n                                formatCurrency(impuestosTrasladadosDelServicio.get('Base')),\n                                impuestosTrasladadosDelServicio.get('Impuesto'),\n                                impuestosTrasladadosDelServicio.get('TipoFactor'),\n                                impuestosTrasladadosDelServicio.get('TasaCuota'),\n                                formatCurrency(impuestosTrasladadosDelServicio.get('Importe'))\n                            ]\n                        ]\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 4\n                },\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        if (contribucionGubernamental) {\n            tableService.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*', '*'],\n                        body: [\n                            [\n                                {\n                                    text: 'CONTRIBUCIÓN GUBERNAMENTAL',\n                                    style: 'tableHeader',\n                                    colSpan: 2,\n                                    alignment: 'center'\n                                },\n                                {}\n                            ],\n                            [\n                                {\n                                    text: 'ESTADO',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPORTE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                }\n                            ],\n                            [\n                                contribucionGubernamental.get('EntidadDondePagaLaContribucion'),\n                                formatCurrency(contribucionGubernamental.get('ImpContrib'))\n                            ]\n                        ]\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 4\n                },\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        if (comisionDelServicio) {\n            tableService.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*', '*', '*'],\n                        body: [\n                            [\n                                {\n                                    text: 'COMISIÓN DEL SERVICIO',\n                                    style: 'tableHeader',\n                                    colSpan: 3,\n                                    alignment: 'center'\n                                },\n                                {},\n                                {}\n                            ],\n                            [\n                                {\n                                    text: 'BASE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'PORCENTAJE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPORTE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                }\n                            ],\n                            [\n                                formatCurrency(comisionDelServicio.get('Base')),\n                                comisionDelServicio.get('Porcentaje'),\n                                formatCurrency(comisionDelServicio.get('Importe'))\n                            ]\n                        ]\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 4\n                },\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        return tableService;\n    }\n\n    protected generateContentPerService(servicios: CNodes): TableCell[][] {\n        const tableServices: TableCell[][] = [];\n        // Header global\n        tableServices.push([\n            {\n                text: 'SERVICIOS',\n                style: 'tableHeader',\n                alignment: 'center'\n            }\n        ]);\n        // Per Services\n        servicios.forEach((servicio) => {\n            tableServices.push([\n                {\n                    margin: 5,\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*', '*', '*', '*'],\n                        body: this.contentService(servicio)\n                    },\n                    layout: this.tableLayoutBordered()\n                }\n            ]);\n        });\n\n        return tableServices;\n    }\n\n    protected generatePlataformasTecnologicas(plataformasTecnologicas: CNodeInterface): Content {\n        const servicios = plataformasTecnologicas.searchNodes(\n            'plataformasTecnologicas:Servicios',\n            'plataformasTecnologicas:DetallesDelServicio'\n        );\n        const bodyPlataformasTecnologicas: TableCell[][] = [];\n        // Header global\n        bodyPlataformasTecnologicas.push([\n            {\n                text: 'SERVICIO MEDIANTE PLATAFORMAS TECNOLÓGICAS',\n                style: 'tableHeader',\n                colSpan: 5,\n                alignment: 'center'\n            },\n            {},\n            {},\n            {},\n            {}\n        ]);\n        // SubHeaders of global\n        bodyPlataformasTecnologicas.push([\n            {\n                text: 'VERSION',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'PERIODICIDAD',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'NUMERO SERVICIOS',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'SUBTOTAL OPERACIONES',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL IVA',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            }\n        ]);\n        bodyPlataformasTecnologicas.push([\n            plataformasTecnologicas.get('Version'),\n            plataformasTecnologicas.get('Periodicidad'),\n            plataformasTecnologicas.get('NumServ'),\n            formatCurrency(plataformasTecnologicas.get('MonTotServSIVA')),\n            formatCurrency(plataformasTecnologicas.get('TotalIVATrasladado'))\n        ]);\n        bodyPlataformasTecnologicas.push([\n            {\n                text: 'TOTAL IVA RETENIDO',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL ISR RETENIDO',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'DIFERENCIA IVA',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL USO DE PLATAFORMA',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL CONTRIBUCIÓN GUBERNAMENTAL',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            }\n        ]);\n        bodyPlataformasTecnologicas.push([\n            formatCurrency(plataformasTecnologicas.get('TotalIVARetenido')),\n            formatCurrency(plataformasTecnologicas.get('TotalISRRetenido')),\n            formatCurrency(plataformasTecnologicas.get('DifIVAEntregadoPrestServ')),\n            formatCurrency(plataformasTecnologicas.get('MonTotalporUsoPlataforma')),\n            plataformasTecnologicas.get('MonTotalContribucionGubernamental') !== ''\n                ? formatCurrency(plataformasTecnologicas.get('MonTotalContribucionGubernamental'))\n                : ''\n        ]);\n\n        if (servicios.length > 0) {\n            bodyPlataformasTecnologicas.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*'],\n                        body: this.generateContentPerService(servicios)\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 5\n                },\n                {},\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*', '*', '*'],\n                body: bodyPlataformasTecnologicas\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateContent(data: RetencionesData): Content {\n        const retenciones = data.retenciones();\n        const emisor = data.emisor();\n        const receptor = data.receptor();\n        const periodo = data.periodo();\n        const totales = data.totales();\n        const additionalFields = data.additionalFields();\n        const plataformasTecnologicas = retenciones.searchNode(\n            'retenciones:Complemento',\n            'plataformasTecnologicas:ServiciosPlataformasTecnologicas'\n        );\n        const content: Content[] = [];\n        content.push(this.generateTopContent(retenciones, data.logo()));\n        content.push('\\n');\n        content.push(this.generateEmisorContent(emisor));\n        content.push('\\n');\n        content.push(this.generateReceptorContent(receptor));\n        content.push('\\n');\n        content.push('\\n');\n        content.push(this.generatePeriodoContent(periodo, retenciones.get('CveRetenc')));\n        content.push('\\n');\n        content.push(this.generateTotales(totales));\n        content.push('\\n');\n        if (plataformasTecnologicas) {\n            content.push(this.generatePlataformasTecnologicas(plataformasTecnologicas));\n            content.push('\\n');\n        }\n        if (additionalFields) {\n            additionalFields.forEach((element) => {\n                content.push({\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [[{ text: element.title, style: 'tableHeader' }], [element.value]]\n                    },\n                    layout: 'lightHorizontalLines'\n                });\n                content.push('\\n');\n            });\n        }\n        content.push(this.generateStampContent(data));\n\n        return content;\n    }\n\n    public translate(data: RetencionesData, defaultStyle: Style): TDocumentDefinitions {\n        const retenciones = data.retenciones();\n        const tfd = data.timbreFiscalDigital();\n        this.version = retenciones.get('Version');\n\n        return {\n            content: this.generateContent(data),\n            styles: {\n                tableHeader: {\n                    bold: true,\n                    fontSize: 10,\n                    color: 'black'\n                },\n                tableSubHeader: {\n                    bold: true,\n                    fontSize: 9,\n                    color: 'black'\n                },\n                tableContent: {\n                    fontSize: 8,\n                    color: 'black',\n                    alignment: 'left'\n                },\n                tableList: {\n                    fontSize: 7,\n                    color: 'black',\n                    alignment: 'center'\n                },\n                tableSat: {\n                    fontSize: 5,\n                    color: 'black',\n                    alignment: 'left'\n                }\n            },\n            defaultStyle,\n            footer: (currentPage, pageCount) =>\n                this.generateFooter(this.version, tfd.get('UUID'), currentPage, pageCount)\n        };\n    }\n}\n"],"names":["AbstractInvoiceData","constructor","this","_emisor","_receptor","_timbreFiscalDigital","_qrUrl","_tfdSourceString","_logo","_additionalFields","_additionalFieldsUP","emisor","receptor","timbreFiscalDigital","qrUrl","tfdSourceString","logo","additionalFields","additionalFieldsUP","buildUrlQr","node","rawString","XmlNodeUtils","nodeToXmlString","document","getParser","parseFromString","DiscoverExtractor","extract","e","CfdiData","comprobante","address","super","_comprobante","_address","searchNode","Error","trim","length","RetencionesData","retenciones","_retenciones","_periodo","_totales","periodo","totales","getGroupToCurrency","group","basics","teens","hundreds","toCurrency","parseInt","substring","zeroAtTheEnd","num","moneda","number","toFixed","integers","indexOf","decimals","monedaName","numberToCurrency","noThousands","noHundreds","thousandsOfMillions","toUpperCase","formatCurrency","currency","Number","isNaN","Intl","NumberFormat","style","currencyDisplay","format","breakEveryNCharacters","str","n","arr","match","RegExp","result","reduce","a","b","PdfmakeNotFound","msg","name","_pdfmake","getPdfMake","installPdfMake","pdfMake","PdfMakerBuilder","documentTranslator","defaultStyle","_documentTranslator","_defaultStyle","font","build","data","destination","Promise","resolve","reject","fs","require","pdfTemplate","buildPdf","pdfStream","createPdfKitDocument","fileWriteStream","createWriteStream","on","err","end","pipe","buildBase64","chunks","chunk","push","Buffer","concat","toString","translate","PdfMakerBrowserBuilder","_data","_destination","console","warn","createPdf","getBase64","pdfBase64","generateRelatedDocsContent","doctoRelacionados","relatedDocsCells","map","doc","get","unshift","text","colSpan","alignment","checkAndAddTotal","attribute","rowToInsert","offsetExists","fontSize","generateTotalesInfoContent","totalesCells","firstRow","secondRow","bold","border","limit","i","tableLayoutBordered","hLineWidth","table","body","headerRows","vLineWidth","_node$table$widths","widths","hLineColor","paddingLeft","paddingRight","_node$table$widths2","GenericCfdiTranslator","generateFooter","version","uuid","currentPage","pageCount","layout","generateTopContent","header","columns","width","image","fit","generateEmisorContent","generateAddress","tableCell","cellAddress","generateReceptorContent","receptorContent","useGlobalInformation","currentContent","globalInformation","undefined","generateGeneralInvoiceInfoContent","generateImpuestos","concepto","impuestosContent","traslados","searchNodes","contentT","traslado","contentR","retencion","generateConceptsContent","conceptos","rowsConceptos","stack","fillColor","generateCurrencyRelatedInfo","totalImpuestosTrasladados","searchAttribute","totalImpuestosRetenidos","totalTasasTraslados","contentColumns","relatedInfoAndImport","margin","parseFloat","relacionados","uuidsArray","relacionado","relacionadosNode","generateStampContent","cfdiData","tfd","tfdCellsTable","rowSpan","qr","generateContent","additionalFields2","content","forEach","element","title","value","usePago10Complement","pago10","pagos","pago","usePago20Complement","pago20","useImpLocal10Complement","impLocal10","bodyImpLocal10","retencionesLocales","trasladosLocales","styles","tableHeader","color","infoHighlight","serieAndFolio","tableContent","tableList","tableSat","footer","GenericRetencionesTranslator","nacionalidad","infoReceptor","domicilioFiscal","nacional","extranjero","generatePeriodoContent","claveRet","generateImpuestosRetenidos","impuestosRetenidos","rowsRetenciones","impuestoRetenido","generateTotales","impuestosRetenidosBody","tfdVersion","contentService","service","tableService","impuestosTrasladadosDelServicio","contribucionGubernamental","comisionDelServicio","generateContentPerService","servicios","tableServices","servicio","generatePlataformasTecnologicas","plataformasTecnologicas","bodyPlataformasTecnologicas","tableSubHeader"],"mappings":"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"}