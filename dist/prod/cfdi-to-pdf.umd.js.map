{"version":3,"file":"cfdi-to-pdf.umd.js","sources":["../../src/abstract-invoice-data.ts","../../src/utils/currency.ts","../../src/utils/break-characters.ts","../../src/exceptions/pdfmake-not-found.ts","../../src/pdfmake-builder.ts","../../src/templates/complements/pago10-complement.ts","../../src/templates/complements/pago20-complement.ts","../../src/cfdi-data.ts","../../src/templates/generic-cfdi-translator.ts","../../src/templates/complements/imp-local10-complement.ts","../../src/templates/generic-retenciones-translator.ts","../../src/builders/pdf-maker-browser-builder.ts","../../src/builders/pdf-maker-builder.ts","../../src/retenciones-data.ts"],"sourcesContent":["import { DiscoverExtractor } from '@nodecfdi/cfdi-expresiones';\nimport { CNodeInterface, XmlNodeUtils, getParser } from '@nodecfdi/cfdiutils-common';\n\nexport abstract class AbstractInvoiceData {\n    protected _emisor!: CNodeInterface;\n\n    protected _receptor!: CNodeInterface;\n\n    protected _timbreFiscalDigital!: CNodeInterface;\n\n    protected _qrUrl!: string;\n\n    protected _tfdSourceString!: string;\n\n    protected _logo: string | undefined;\n\n    protected _additionalFields: { title: string; value: string }[] | undefined;\n\n    protected _additionalFieldsUP: { title: string; value: string }[] | undefined;\n\n    public emisor(): CNodeInterface {\n        return this._emisor;\n    }\n\n    public receptor(): CNodeInterface {\n        return this._receptor;\n    }\n\n    public timbreFiscalDigital(): CNodeInterface {\n        return this._timbreFiscalDigital;\n    }\n\n    public qrUrl(): string {\n        return this._qrUrl;\n    }\n\n    public tfdSourceString(): string {\n        return this._tfdSourceString;\n    }\n\n    public logo(): string | undefined {\n        return this._logo;\n    }\n\n    public additionalFields(): { title: string; value: string }[] | undefined {\n        return this._additionalFields;\n    }\n\n    public additionalFieldsUP(): { title: string; value: string }[] | undefined {\n        return this._additionalFieldsUP;\n    }\n\n    public buildUrlQr(node: CNodeInterface): void {\n        const rawString = XmlNodeUtils.nodeToXmlString(node, true);\n        const document = getParser().parseFromString(rawString, 'text/xml');\n        try {\n            this._qrUrl = new DiscoverExtractor().extract(document);\n        } catch (e) {\n            // not generated qrURL\n        }\n    }\n}\n","const getGroupToCurrency = (group: string): string => {\n    // necessary arrays needed to convert from numbers to currency\n    const basics = [\n        'cero',\n        'un',\n        'dos',\n        'tres',\n        'cuatro',\n        'cinco',\n        'seis',\n        'siete',\n        'ocho',\n        'nueve',\n        'diez',\n        'once',\n        'doce',\n        'trece',\n        'catorce',\n        'quince'\n    ];\n    const teens = [\n        '',\n        'dieci',\n        'veinti',\n        'treinta',\n        'cuarenta',\n        'cincuenta',\n        'sesenta',\n        'setenta',\n        'ochenta',\n        'noventa'\n    ];\n    const hundreds = [\n        '',\n        'ciento',\n        'doscientos',\n        'trescientos',\n        'cuatrocientos',\n        'quinientos',\n        'seiscientos',\n        'setecientos',\n        'ochocientos',\n        'novecientos'\n    ];\n    // variable used to temporarily store currency\n    let toCurrency = '';\n    // handle hundreds\n    if (group.length === 3) {\n        switch (parseInt(group, 10)) {\n            case 100:\n                return 'cien ';\n            case 0:\n                return '';\n            default:\n                toCurrency += `${hundreds[parseInt(group[0], 10)]} `;\n        }\n        group = group.substring(1, 3);\n    }\n    // handle teens and 'basic' numbers\n    if (parseInt(group, 10) <= 15) {\n        // if group is less than 15, select from basics array\n        if (group === '00') {\n            return toCurrency;\n        }\n        toCurrency += `${basics[parseInt(group, 10)]} `;\n    } else {\n        // else look for the number in both teens and basics arrays\n        const zeroAtTheEnd = group[1] === '0';\n        switch (parseInt(group, 10)) {\n            case 20:\n                return `${toCurrency}veinte `;\n            default:\n                toCurrency += `${\n                    teens[parseInt(group[0], 10)] +\n                    (parseInt(group[0], 10) >= 3 && !zeroAtTheEnd ? ' y ' : '') +\n                    (zeroAtTheEnd ? '' : basics[parseInt(group[1], 10)])\n                } `;\n        }\n    }\n\n    return toCurrency;\n};\n\nconst toCurrency = (num: number, moneda?: string): string => {\n    // number to string\n    const number = num.toFixed(2);\n    // separate decimals (only 2) and integers\n    let integers = number.substring(0, number.indexOf('.'));\n    const decimals = number.substring(number.indexOf('.') + 1, number.length);\n    const monedaName = !moneda || moneda === 'MXN' ? 'M.N.' : moneda;\n    // initialize string to store currency\n    let numberToCurrency = '';\n    // some helpful variables\n    let noThousands = false;\n    let noHundreds = false;\n    let thousandsOfMillions = false;\n    // Maximum supported number is 999,999,999,999.99\n    if (integers.length <= 12) {\n        // evaluate each group of 3 digits (hundreds, thousands, millions, thousands of millions)\n        // evaluate thousands of millions\n        if (integers.length === 12 || integers.length === 11 || integers.length === 10) {\n            const group = integers.substring(0, integers.length - 9);\n            thousandsOfMillions = true;\n            switch (parseInt(group, 10)) {\n                /* istanbul ignore next */\n                case 0:\n                    break;\n                case 1:\n                    numberToCurrency += 'mil ';\n                    break;\n                default:\n                    numberToCurrency += `${getGroupToCurrency(group)}mil `;\n            }\n            integers = integers.substring(integers.length - 9, integers.length);\n        }\n        // evaluate millions\n        if (integers.length === 9 || integers.length === 8 || integers.length === 7) {\n            const group = integers.substring(0, integers.length - 6);\n            numberToCurrency += getGroupToCurrency(group);\n            if (!thousandsOfMillions && parseInt(group, 10) === 1) {\n                numberToCurrency += 'millón ';\n            } else {\n                numberToCurrency += 'millones ';\n            }\n            integers = integers.substring(integers.length - 6, integers.length);\n        }\n        // evaluate thousands\n        if (integers.length === 6 || integers.length === 5 || integers.length === 4) {\n            const group = integers.substring(0, integers.length - 3);\n            noThousands = parseInt(group, 10) === 0;\n            switch (parseInt(group, 10)) {\n                case 0:\n                    break;\n                case 1:\n                    numberToCurrency += 'mil ';\n                    break;\n                default:\n                    numberToCurrency += `${getGroupToCurrency(group)}mil `;\n            }\n            integers = integers.substring(integers.length - 3, integers.length);\n        }\n        // evaluate hundreds\n        noHundreds = parseInt(integers, 10) === 0;\n        numberToCurrency += getGroupToCurrency(integers);\n        numberToCurrency += `${\n            (noThousands && noHundreds ? 'de ' : '') + (numberToCurrency === 'un ' ? 'peso ' : 'pesos ') + decimals\n        }/100 ${monedaName}`;\n\n        return numberToCurrency.toUpperCase();\n    } else {\n        throw new Error('El número es demasiado grande.');\n    }\n};\n\nconst formatCurrency = (currency: number | string): string => {\n    if (typeof currency === 'string') {\n        currency = Number(currency);\n    }\n\n    const number = Number.isNaN(currency) ? 0 : Number(currency);\n\n    return Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', currencyDisplay: 'symbol' }).format(number);\n};\n\nexport { toCurrency, formatCurrency };\n","const breakEveryNCharacters = (str: string, n = 86): string => {\n    const arr = str.match(new RegExp(`.{1,${n}}`, 'g'));\n    let result = str;\n    if (arr) {\n        result = arr.reduce((a, b) => {\n            return `${a}\\n${b}`;\n        });\n    }\n\n    return result;\n};\n\nexport { breakEveryNCharacters };\n","export class PdfmakeNotFound extends Error {\n    constructor(msg: string) {\n        super(msg);\n        this.name = 'PdfmakeNotFound';\n    }\n}\n","import { BufferOptions, CustomTableLayout, TDocumentDefinitions, TFontDictionary } from 'pdfmake/interfaces';\nimport { PdfmakeNotFound } from './exceptions/pdfmake-not-found';\n\nexport interface PdfKitDocument extends NodeJS.ReadableStream {\n    end(): void;\n}\n\nexport interface TCreatedPdf {\n    download(cb?: () => void, options?: BufferOptions): void;\n    download(defaultFileName: string, cb?: () => void, options?: BufferOptions): void;\n    getBlob(cb: (result: Blob) => void, options?: BufferOptions): void;\n    getBase64(cb: (result: string) => void, options?: BufferOptions): void;\n    getBuffer(cb: (result: Buffer) => void, options?: BufferOptions): void;\n    getDataUrl(cb: (result: string) => void, options?: BufferOptions): void;\n    getStream(options?: BufferOptions): PdfKitDocument;\n    open(options?: BufferOptions, win?: Window | null): void;\n    print(options?: BufferOptions, win?: Window | null): void;\n}\n\nexport interface PdfMakeBrowser {\n    createPdf(\n        documentDefinitions: TDocumentDefinitions,\n        tableLayouts?: { [name: string]: CustomTableLayout },\n        fonts?: TFontDictionary,\n        vfs?: { [file: string]: string }\n    ): TCreatedPdf;\n}\n\nexport interface PdfMakeNode {\n    createPdfKitDocument(docDefinition: TDocumentDefinitions, options?: BufferOptions): PdfKitDocument;\n}\n\nlet _pdfmake: PdfMakeBrowser | PdfMakeNode | undefined;\n\nconst getPdfMake = <T extends PdfMakeBrowser | PdfMakeNode>(): T => {\n    if (!_pdfmake) {\n        throw new PdfmakeNotFound('No pdfmake was provided.');\n    }\n\n    return _pdfmake as T;\n};\n\nconst installPdfMake = (pdfMake: PdfMakeBrowser | PdfMakeNode): void => {\n    _pdfmake = pdfMake;\n};\n\nexport { getPdfMake, installPdfMake };\n","import { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { Content, TableCell } from 'pdfmake/interfaces';\nimport { formatCurrency } from '../../utils/currency';\n\nconst generateRelatedDocsContent = (doctoRelacionados: CNodes): TableCell[][] => {\n    const relatedDocsCells = doctoRelacionados.map<TableCell[]>((doc) => {\n        return [\n            doc.get('IdDocumento'),\n            doc.get('MetodoDePagoDR'),\n            doc.get('MonedaDR'),\n            doc.get('TipoCambioDR'),\n            doc.get('NumParcialidad'),\n            formatCurrency(doc.get('ImpSaldoAnt') || '0'),\n            formatCurrency(doc.get('ImpPagado') || '0'),\n            formatCurrency(doc.get('ImpSaldoInsoluto') || '0')\n        ];\n    });\n    relatedDocsCells.unshift([\n        'UUID',\n        'Método de Pago',\n        'Moneda',\n        'Tipo de Cambio',\n        'Num. Parcialidad',\n        'Importe Saldo Anterior',\n        'Importe Pagado',\n        'Importe Saldo Insoluto'\n    ]);\n    relatedDocsCells.unshift([\n        {\n            text: 'DOCUMENTOS RELACIONADOS',\n            style: 'tableHeader',\n            colSpan: 8,\n            alignment: 'center'\n        },\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {}\n    ]);\n\n    return relatedDocsCells;\n};\n\nconst usePago10Complement = (comprobante: CNodeInterface, currentContent: Content[]): void => {\n    // Verify if exists pago10 complement\n    const pago10 = comprobante.searchNode('cfdi:Complemento', 'pago10:Pagos');\n    if (!pago10) return;\n\n    const pagos = pago10.searchNodes('pago10:Pago');\n    if (pagos.length > 0) {\n        for (const pago of pagos) {\n            const doctoRelacionados = pago.searchNodes('pago10:DoctoRelacionado');\n            currentContent.push({\n                style: 'tableContent',\n                table: {\n                    widths: [95, '*', 95, '*'],\n                    body: [\n                        [\n                            {\n                                text: 'INFORMACIÓN DE PAGO',\n                                style: 'tableHeader',\n                                colSpan: 4,\n                                alignment: 'center'\n                            },\n                            {},\n                            {},\n                            {}\n                        ],\n                        ['FECHA:', pago.get('FechaPago'), 'FORMA PAGO:', pago.get('FormaDePagoP')],\n                        ['MONEDA:', pago.get('MonedaP'), 'MONTO:', formatCurrency(pago.get('Monto') || '0')],\n                        pago.offsetExists('TipoCambioP')\n                            ? ['TIPO DE CAMBIO:', pago.get('TipoCambioP'), '', '']\n                            : ['', '', '', '']\n                    ]\n                },\n                layout: 'lightHorizontalLines'\n            });\n            currentContent.push('\\n');\n            currentContent.push({\n                style: 'tableList',\n                table: {\n                    widths: ['*', 'auto', 'auto', 30, 20, 'auto', 'auto', 'auto'],\n                    body: generateRelatedDocsContent(doctoRelacionados)\n                },\n                layout: {\n                    fillColor(i: number): string | null {\n                        return i % 2 !== 0 ? '#CCCCCC' : null;\n                    }\n                }\n            });\n            currentContent.push('\\n');\n        }\n    }\n};\n\nexport { usePago10Complement };\n","import { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { Content, TableCell } from 'pdfmake/interfaces';\nimport { formatCurrency } from '../../utils/currency';\n\nconst generateRelatedDocsContent = (doctoRelacionados: CNodes): TableCell[][] => {\n    const relatedDocsCells = doctoRelacionados.map<TableCell[]>((doc) => {\n        return [\n            doc.get('IdDocumento'),\n            `${doc.get('Serie')}/${doc.get('Folio')}`,\n            doc.get('MonedaDR'),\n            doc.get('EquivalenciaDR'),\n            doc.get('NumParcialidad'),\n            formatCurrency(doc.get('ImpSaldoAnt') || '0'),\n            formatCurrency(doc.get('ImpPagado') || '0'),\n            formatCurrency(doc.get('ImpSaldoInsoluto') || '0')\n        ];\n    });\n    relatedDocsCells.unshift([\n        'UUID',\n        'Serie / Folio',\n        'Moneda',\n        'Tipo de Cambio',\n        'Num. Parcialidad',\n        'Importe Saldo Anterior',\n        'Importe Pagado',\n        'Importe Saldo Insoluto'\n    ]);\n    relatedDocsCells.unshift([\n        {\n            text: 'DOCUMENTOS RELACIONADOS',\n            style: 'tableHeader',\n            colSpan: 8,\n            alignment: 'center'\n        },\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {}\n    ]);\n\n    return relatedDocsCells;\n};\n\nconst checkAndAddTotal = (totales: CNodeInterface, attribute: string, rowToInsert: TableCell[]): void => {\n    if (totales.offsetExists(attribute)) {\n        rowToInsert.push({\n            text: `${attribute}: ${totales.get(attribute)}`,\n            fontSize: 7\n        });\n    }\n};\n\nconst generateTotalesInfoContent = (totales: CNodeInterface): TableCell[][] => {\n    const totalesCells: TableCell[][] = [];\n\n    const firstRow: TableCell[] = [];\n    const secondRow: TableCell[] = [];\n\n    checkAndAddTotal(totales, 'TotalRetencionesIVA', firstRow);\n    checkAndAddTotal(totales, 'TotalRetencionesISR', firstRow);\n    checkAndAddTotal(totales, 'TotalRetencionesIEPS', firstRow);\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVA16', firstRow);\n    checkAndAddTotal(totales, 'TotalTrasladosImpuestoIVA16', firstRow);\n\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVA8', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosImpuestoIVA8', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVA0', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosImpuestoIVA0', secondRow);\n    checkAndAddTotal(totales, 'TotalTrasladosBaseIVAExento', secondRow);\n\n    totalesCells.push([\n        {\n            text: 'Totales',\n            colSpan: 2,\n            alignment: 'center',\n            bold: true,\n            border: [true, true, false, true]\n        },\n        {},\n        {\n            text: `Monto Total: ${formatCurrency(totales.get('MontoTotalPagos'))}`,\n            colSpan: 3,\n            alignment: 'center',\n            bold: true,\n            border: [false, true, true, true]\n        },\n        {},\n        {}\n    ]);\n\n    if (firstRow.length > 0) {\n        const limit = 5 - firstRow.length;\n        for (let i = 0; i < limit; i++) {\n            firstRow.push({});\n        }\n        totalesCells.push(firstRow);\n    }\n\n    if (secondRow.length > 0) {\n        const limit = 5 - secondRow.length;\n        for (let i = 0; i < limit; i++) {\n            secondRow.push({});\n        }\n        totalesCells.push(secondRow);\n    }\n\n    return totalesCells;\n};\n\nconst usePago20Complement = (comprobante: CNodeInterface, currentContent: Content[]): void => {\n    // Verify if exists pago20 complement\n    const pago20 = comprobante.searchNode('cfdi:Complemento', 'pago20:Pagos');\n    if (!pago20) return;\n\n    const totales = pago20.searchNode('pago20:Totales');\n    const pagos = pago20.searchNodes('pago20:Pago');\n\n    if (pagos.length > 0 && totales !== undefined) {\n        currentContent.push({\n            style: 'tableContent',\n            table: {\n                widths: ['20%', '20%', '20%', '20%', '20%'],\n                body: generateTotalesInfoContent(totales)\n            }\n        });\n        currentContent.push('\\n');\n        for (const pago of pagos) {\n            const doctoRelacionados = pago.searchNodes('pago20:DoctoRelacionado');\n            currentContent.push({\n                style: 'tableContent',\n                table: {\n                    widths: [95, '*', 95, '*'],\n                    body: [\n                        [\n                            {\n                                text: 'INFORMACIÓN DE PAGO',\n                                style: 'tableHeader',\n                                colSpan: 4,\n                                alignment: 'center'\n                            },\n                            {},\n                            {},\n                            {}\n                        ],\n                        ['FECHA:', pago.get('FechaPago'), 'FORMA PAGO:', pago.get('FormaDePagoP')],\n                        ['MONEDA:', pago.get('MonedaP'), 'MONTO:', formatCurrency(pago.get('Monto') || '0')],\n                        pago.offsetExists('TipoCambioP')\n                            ? ['TIPO DE CAMBIO:', pago.get('TipoCambioP'), {}, {}]\n                            : [{}, {}, {}, {}]\n                    ]\n                },\n                layout: 'lightHorizontalLines'\n            });\n            currentContent.push({\n                style: 'tableList',\n                table: {\n                    widths: ['*', 'auto', 'auto', 25, 20, 'auto', 'auto', 'auto'],\n                    body: generateRelatedDocsContent(doctoRelacionados)\n                },\n                layout: {\n                    fillColor(i: number): string | null {\n                        return i % 2 !== 0 ? '#CCCCCC' : null;\n                    }\n                }\n            });\n            currentContent.push('\\n');\n            currentContent.push('\\n');\n        }\n    }\n};\n\nexport { usePago20Complement };\n","import { CNodeInterface } from '@nodecfdi/cfdiutils-common';\nimport { AbstractInvoiceData } from './abstract-invoice-data';\n\nexport class CfdiData extends AbstractInvoiceData {\n    private readonly _comprobante: CNodeInterface;\n\n    private readonly _address: string | undefined;\n\n    constructor(\n        comprobante: CNodeInterface,\n        qrUrl: string,\n        tfdSourceString: string,\n        logo?: string,\n        address?: string,\n        additionalFields?: { title: string; value: string }[],\n        additionalFieldsUP?: { title: string; value: string }[]\n    ) {\n        super();\n        const emisor = comprobante.searchNode('cfdi:Emisor');\n        if (!emisor) {\n            throw new Error('El CFDI no contiene nodo emisor');\n        }\n        const receptor = comprobante.searchNode('cfdi:Receptor');\n        if (!receptor) {\n            throw new Error('El CFDI no contiene nodo receptor');\n        }\n        const timbreFiscalDigital = comprobante.searchNode('cfdi:Complemento', 'tfd:TimbreFiscalDigital');\n        if (!timbreFiscalDigital) {\n            throw new Error('El CFDI no contiene complemento de timbre fiscal digital');\n        }\n\n        this._comprobante = comprobante;\n        this._emisor = emisor;\n        this._receptor = receptor;\n        this._timbreFiscalDigital = timbreFiscalDigital;\n        this._qrUrl = qrUrl;\n        this._tfdSourceString = tfdSourceString;\n        this._logo = logo;\n        this._address = address;\n        this._additionalFields = additionalFields;\n        this._additionalFieldsUP = additionalFieldsUP;\n        if (this._qrUrl.trim().length === 0) {\n            this.buildUrlQr(this._comprobante);\n        }\n    }\n\n    public comprobante(): CNodeInterface {\n        return this._comprobante;\n    }\n\n    public address(): string | undefined {\n        return this._address;\n    }\n}\n","import {\n    Column,\n    Content,\n    ContentColumns,\n    ContentTable,\n    Style,\n    TableCell,\n    TDocumentDefinitions\n} from 'pdfmake/interfaces';\nimport { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { DocumentTranslatorInterface } from './document-translator-interface';\nimport { CfdiData } from '../cfdi-data';\nimport { formatCurrency, toCurrency } from '../utils/currency';\nimport { breakEveryNCharacters } from '../utils/break-characters';\nimport { usePago10Complement } from './complements/pago10-complement';\nimport { usePago20Complement } from './complements/pago20-complement';\nimport { useImpLocal10Complement } from './complements/imp-local10-complement';\n\nexport class GenericCfdiTranslator implements DocumentTranslatorInterface<CfdiData> {\n    protected generateFooter(version: string, uuid: string, currentPage: number, pageCount: number): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: `Este documento es una representación impresa de un Comprobante Fiscal Digital a través de Internet versión ${version}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    [\n                        {\n                            text: `UUID: ${uuid} - Página ${currentPage} de ${pageCount}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ]\n                ]\n            },\n            layout: 'noBorders'\n        };\n    }\n\n    protected generateTopContent(comprobante: CNodeInterface, logo?: string): Content {\n        const header: ContentColumns = {\n            columns: [\n                {\n                    width: '*',\n                    alignment: 'left',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [['']]\n                    },\n                    layout: 'lightHorizontalLines'\n                },\n                {\n                    width: 'auto',\n                    alignment: 'center',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['auto', 'auto'],\n                        body: [\n                            ['SERIE:', { text: comprobante.get('Serie'), style: 'serieAndFolio' }],\n                            ['FOLIO:', { text: comprobante.get('Folio'), style: 'serieAndFolio' }],\n                            ['FECHA:', comprobante.get('Fecha')],\n                            ['EXPEDICIÓN:', comprobante.get('LugarExpedicion')],\n                            ['COMPROBANTE:', comprobante.get('TipoDeComprobante')],\n                            ['VERSIÓN:', comprobante.get('Version')]\n                        ]\n                    },\n                    layout: 'lightHorizontalLines'\n                }\n            ]\n        };\n        if (logo) {\n            //Se modifico para poner el logo de salsa de [80, 80]\n            (header.columns[0] as ContentTable).table.body[0][0] = { image: logo, fit: [302, 90] };\n            (header.columns[0] as ContentTable).table.widths = ['*'];\n        }\n\n        return header;\n    }\n\n    protected generateEmisorContent(emisor: CNodeInterface): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: 'EMISOR',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'left'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    ['NOMBRE:', emisor.get('Nombre'), 'RFC:', emisor.get('Rfc')],\n                    ['REGIMEN FISCAL:', { colSpan: 3, text: emisor.get('RegimenFiscal') }, {}, {}]\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected generateAddress(receptor: CNodeInterface, address?: string): TableCell[][] {\n        const tableCell: TableCell[][] = [];\n        const cellAddress: TableCell[] = [];\n        if (address || receptor.offsetExists('DomicilioFiscalReceptor')) {\n            cellAddress.push('DOMICILIO:', `${address ? address + ' ' : ''}${receptor.get('DomicilioFiscalReceptor')}`);\n        }\n        cellAddress.push('USO CFDI', {\n            colSpan: address || receptor.offsetExists('DomicilioFiscalReceptor') ? 1 : 3,\n            text: receptor.get('UsoCFDI')\n        });\n        tableCell.push(cellAddress);\n        if (receptor.offsetExists('ResidenciaFiscal') && receptor.offsetExists('NumRegIdTrib')) {\n            tableCell.push([\n                'RESIDENCIA FISCAL:',\n                receptor.get('ResidenciaFiscal'),\n                'NUMERO ID TRIB.:',\n                receptor.get('NumRegIdTrib')\n            ]);\n        }\n\n        return tableCell;\n    }\n\n    protected generateReceptorContent(receptor: CNodeInterface, address?: string): Content {\n        const receptorContent: Content = {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: 'RECEPTOR',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'left'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    ['NOMBRE:', receptor.get('Nombre'), 'RFC:', receptor.get('Rfc')],\n                    ...this.generateAddress(receptor, address)\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        };\n\n        if (receptor.offsetExists('RegimenFiscalReceptor')) {\n            receptorContent.table.body.push([\n                'REGIMEN FISCAL',\n                {\n                    colSpan: 3,\n                    text: receptor.get('RegimenFiscalReceptor')\n                },\n                {},\n                {}\n            ]);\n        }\n\n        return receptorContent;\n    }\n\n    protected useGlobalInformation(comprobante: CNodeInterface, currentContent: Content[]): void {\n        const globalInformation = comprobante.searchNode('cfdi:InformacionGlobal');\n        if (globalInformation === undefined) return;\n        currentContent.push({\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*'],\n                body: [\n                    [\n                        {\n                            text: 'INFORMACIÓN GLOBAL',\n                            style: 'tableHeader',\n                            colSpan: 3,\n                            alignment: 'left'\n                        },\n                        {},\n                        {}\n                    ],\n                    [\n                        `Periodicidad: ${globalInformation.get('Periodicidad')}`,\n                        `Meses: ${globalInformation.get('Meses')}`,\n                        `Año: ${globalInformation.get('Año')}`\n                    ]\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        });\n        currentContent.push('\\n');\n    }\n\n    protected generateGeneralInvoiceInfoContent(comprobante: CNodeInterface): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: [95, '*', 95, '*'],\n                body: [\n                    [\n                        {\n                            text: 'DATOS GENERALES DEL COMPROBANTE',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'left'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    ['MONEDA:', comprobante.get('Moneda'), 'FORMA PAGO:', comprobante.get('FormaPago')],\n                    [\n                        'METODO DE PAGO:',\n                        comprobante.get('MetodoPago'),\n                        'CONDICIONES DE PAGO:',\n                        comprobante.get('CondicionesDePago')\n                    ]\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected generateImpuestos(concepto: CNodeInterface): Content[] {\n        const impuestosContent: Content[] = [];\n        const traslados = concepto.searchNodes('cfdi:Impuestos', 'cfdi:Traslados', 'cfdi:Traslado');\n        const retenciones = concepto.searchNodes('cfdi:Impuestos', 'cfdi:Retenciones', 'cfdi:Retencion');\n        if (traslados.length > 0) {\n            impuestosContent.push('Traslados');\n            const contentT = traslados.map<TableCell[]>((traslado) => {\n                return [\n                    traslado.get('Impuesto'),\n                    traslado.get('TipoFactor') === 'Exento' ? 'EXENTO' : formatCurrency(traslado.get('Importe'))\n                ];\n            });\n            impuestosContent.push({\n                table: {\n                    body: contentT\n                },\n                layout: 'noBorders'\n            });\n        }\n        if (retenciones.length > 0) {\n            impuestosContent.push('Retenciones');\n            const contentR = retenciones.map<TableCell[]>((retencion) => {\n                return [retencion.get('Impuesto'), formatCurrency(retencion.get('Importe'))];\n            });\n            impuestosContent.push({\n                table: {\n                    body: contentR\n                },\n                layout: 'noBorders'\n            });\n        }\n\n        return impuestosContent;\n    }\n\n    protected generateConceptsContent(conceptos: CNodes): Content {\n        const rowsConceptos = conceptos.map<TableCell[]>((concepto) => {\n            return [\n                concepto.get('ClaveProdServ'),\n                concepto.get('Cantidad'),\n                concepto.get('ClaveUnidad'),\n                concepto.get('NoIdentificacion') || '(Ninguno)',\n                concepto.get('Descripcion'),\n                formatCurrency(concepto.get('ValorUnitario')),\n                formatCurrency(concepto.get('Descuento')),\n                {\n                    colSpan: 2,\n                    stack: this.generateImpuestos(concepto)\n                },\n                '',\n                formatCurrency(concepto.get('Importe'))\n            ];\n        });\n\n        rowsConceptos.unshift([\n            'ClaveProdServ',\n            'Cant',\n            'Clave Unidad',\n            'Identificación',\n            'Descripción',\n            'Valor Unitario',\n            'Descuento',\n            {\n                colSpan: 2,\n                text: 'Impuesto'\n            },\n            '',\n            'Importe'\n        ]);\n\n        return {\n            style: 'tableList',\n            table: {\n                widths: ['auto', 'auto', 'auto', 'auto', '*', 'auto', 'auto', 'auto', 'auto', 'auto'],\n                body: rowsConceptos\n            },\n            layout: {\n                fillColor(i): string | null {\n                    return i === 0 ? '#CCCCCC' : null;\n                }\n            }\n        };\n    }\n\n    protected generateCurrencyRelatedInfo(comprobante: CNodeInterface): Content {\n        const totalImpuestosTrasladados = comprobante.searchAttribute('cfdi:Impuestos', 'TotalImpuestosTrasladados');\n        const totalImpuestosRetenidos = comprobante.searchAttribute('cfdi:Impuestos', 'TotalImpuestosRetenidos');\n        const totalTasasTraslados = comprobante.searchNodes('cfdi:Impuestos', 'cfdi:Traslados', 'cfdi:Traslado');\n        const contentColumns: Column[] = [];\n        const relatedInfoAndImport: Column[] = [];\n        if (comprobante.get('TipoDeComprobante') !== 'P') {\n            relatedInfoAndImport.push({\n                fontSize: 7,\n                margin: [0, 5, 0, 0],\n                columns: [\n                    { width: 'auto', text: 'IMPORTE CON LETRA:', margin: [0, 0, 5, 0] },\n                    {\n                        width: 'auto',\n                        text: toCurrency(parseFloat(comprobante.get('Total') || '0'), comprobante.get('Moneda'))\n                    },\n                    { width: '*', text: '' }\n                ]\n            });\n        }\n        if (comprobante.get('Version') === '3.3') {\n            const relacionados = comprobante.searchNode('cfdi:CfdiRelacionados');\n            if (relacionados) {\n                const uuidsArray = relacionados.searchNodes('cfdi:CfdiRelacionado').map((relacionado) => {\n                    return [`UUID: ${relacionado.get('UUID')}`];\n                });\n\n                relatedInfoAndImport.push({\n                    fontSize: 7,\n                    margin: [0, 5, 0, 0],\n                    table: {\n                        widths: ['*'],\n                        body: [\n                            [\n                                {\n                                    text: `CFDIS RELACIONADOS - TIPO RELACIÓN ${relacionados.get('TipoRelacion')}`,\n                                    fillColor: '#CCCCCC'\n                                }\n                            ],\n                            ...uuidsArray\n                        ]\n                    }\n                });\n            }\n        } else {\n            const relacionados = comprobante.searchNodes('cfdi:CfdiRelacionados');\n            if (relacionados.length > 0) {\n                for (const relacionadosNode of relacionados) {\n                    const uuidsArray = relacionadosNode.searchNodes('cfdi:CfdiRelacionado').map((relacionado) => {\n                        return [`UUID: ${relacionado.get('UUID')}`];\n                    });\n\n                    relatedInfoAndImport.push({\n                        fontSize: 7,\n                        margin: [0, 5, 0, 0],\n                        table: {\n                            widths: ['*'],\n                            body: [\n                                [\n                                    {\n                                        text: `CFDIS RELACIONADOS - TIPO RELACIÓN ${relacionadosNode.get(\n                                            'TipoRelacion'\n                                        )}`,\n                                        fillColor: '#CCCCCC'\n                                    }\n                                ],\n                                ...uuidsArray\n                            ]\n                        }\n                    });\n                }\n            }\n        }\n        contentColumns.push(relatedInfoAndImport);\n        if (comprobante.get('TipoDeComprobante') !== 'P'&& comprobante.get('TipoDeComprobante') !== 'N') {\n            contentColumns.push({\n                width: 'auto',\n                alignment: 'right',\n                style: 'tableContent',\n                margin: [10, 0, 0, 0],\n                table: {\n                    widths: ['auto', 'auto'],\n                    body: [\n                        ['SUBTOTAL:', { text: formatCurrency(comprobante.get('SubTotal')), fontSize: 9 }],\n                        ['DESCUENTO:', formatCurrency(comprobante.get('Descuento'))],\n                        [\n                            'SUBTOTAL T16:',\n                            formatCurrency(\n                                totalTasasTraslados[0] != undefined ? totalTasasTraslados[0].get('Base') : 0.0\n                            )\n                        ],\n                        [\n                            'SUBTOTAL T0:',\n                            formatCurrency(\n                                totalTasasTraslados[1] != undefined ? totalTasasTraslados[1].get('Base') : 0.0\n                            )\n                        ],\n                        ['TOTAL IMP. TRASLADADOS:', formatCurrency(totalImpuestosTrasladados)],\n                        ['TOTAL IMP. RETENIDOS:', formatCurrency(totalImpuestosRetenidos)],\n                        [\n                            {\n                                text: 'TOTAL:',\n                                fontSize: 11,\n                                bold: true\n                            },\n                            { text: formatCurrency(comprobante.get('Total')), fontSize: 11, bold: true }\n                        ]\n                    ]\n                },\n                layout: 'lightHorizontalLines'\n            });\n        }\n        if(comprobante.get('TipoDeComprobante') === 'N'){\n            const deducciones = comprobante.searchAttribute(\n            'cfdi:Complemento',\n            'nomina12:Nomina',\n            'nomina12:Deducciones',\n            'TotalOtrasDeducciones'\n            );\n            const impRetenidos = comprobante.searchAttribute(\n                'cfdi:Complemento',\n                'nomina12:Nomina',\n                'nomina12:Deducciones',\n                'TotalImpuestosRetenidos'\n                );\n        if(deducciones=== undefined || impRetenidos=== undefined) return '';\n\n            contentColumns.push({\n                width: 'auto',\n                alignment: 'right',\n                style: 'tableContent',\n                margin: [10, 0, 0, 0],\n                table: {\n                    widths: ['auto', 'auto'],\n                    body: [\n                        ['SUBTOTAL:', { text: formatCurrency(comprobante.get('SubTotal')), fontSize: 9 }],\n                        ['DESCUENTOS:', formatCurrency(deducciones)],\n                        ['RETENCIONES', formatCurrency(impRetenidos)],\n                        [\n                            {\n                                text: 'TOTAL RECIBO:',\n                                fontSize: 11,\n                                bold: true\n                            },\n                            { text: formatCurrency(comprobante.get('Total')), fontSize: 11, bold: true }\n                        ]\n                    ]\n                },\n                layout: 'lightHorizontalLines'\n            });\n        \n        }\n\n        return {\n            columns: contentColumns\n        };\n    }\n\n    protected generateStampContent(cfdiData: CfdiData): Content {\n        const comprobante = cfdiData.comprobante();\n        const tfd = cfdiData.timbreFiscalDigital();\n        const tfdSourceString = cfdiData.tfdSourceString();\n        const qrUrl = cfdiData.qrUrl();\n        const tfdCellsTable: TableCell[][] = [];\n        if (tfd) {\n            tfdCellsTable.push(\n                [\n                    {\n                        colSpan: 1,\n                        rowSpan: 8,\n                        qr: qrUrl,\n                        fit: 120\n                    },\n                    '',\n                    ''\n                ],\n                ['', 'NUMERO SERIE CERTIFICADO SAT', tfd.get('NoCertificadoSAT')],\n                ['', 'NUMERO SERIE CERTIFICADO EMISOR', comprobante.get('NoCertificado')],\n                ['', 'FECHA HORA CERTIFICACIÓN', tfd.get('FechaTimbrado')],\n                ['', 'FOLIO FISCAL UUID', tfd.get('UUID')],\n                ['', 'SELLO DIGITAL', breakEveryNCharacters(tfd.get('SelloCFD'), 86)],\n                ['', 'SELLO DEL SAT', breakEveryNCharacters(tfd.get('SelloSAT'), 86)]\n            );\n        }\n        tfdCellsTable.push([\n            '',\n            'CADENA ORIGINAL CC:',\n            {\n                text: breakEveryNCharacters(tfdSourceString, 86)\n            }\n        ]);\n\n        return {\n            style: 'tableSat',\n            table: {\n                widths: ['auto', 'auto', '*'],\n                body: tfdCellsTable\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected generateNominaTopContent(comprobante: CNodeInterface): Content {\n        const nomina = comprobante.searchNode('cfdi:Complemento', 'nomina12:Nomina');\n        const receptor = comprobante.searchNode('cfdi:Receptor');\n        const nominaEmisor = comprobante.searchNode('cfdi:Complemento', 'nomina12:Nomina', 'nomina12:Emisor');\n        const nominaReceptor = comprobante.searchNode('cfdi:Complemento', 'nomina12:Nomina', 'nomina12:Receptor');\n\n        if (\n            nomina === undefined ||\n            nominaEmisor === undefined ||\n            nominaReceptor === undefined ||\n            receptor === undefined\n        )\n            return '';\n        console.log(nomina);\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['50%', '50%'],\n                body: [\n                    [\n                        {\n                            text: 'NOMINA',\n                            style: 'tableHeader',\n                            colSpan: 2,\n                            alignment: 'left'\n                        },\n                        {}\n                    ],\n                    [\n                        nominaReceptor.get('NumEmpleado') + ' - ' + receptor.get('Nombre'),\n                        'PERIODO DEL: ' + nomina.get('FechaInicialPago') + ' AL: ' + nomina.get('FechaFinalPago')\n                    ],\n                    [\n                        'RFC: \\t' + receptor.get('Rfc'),\n                        'PEROIODICIDAD PAGO: \\t' + nominaReceptor.get('PeriodicidadPago')\n                    ],\n                    ['CURP: \\t' + nominaReceptor.get('Curp'), 'FECHA PAGO: \\t' + nomina.get('FechaPago')],\n                    [\n                        'FECHA INI REL LABORAL: \\t' + nominaReceptor.get('FechaInicioRelLaboral'),\n                        'PUESTO: \\t' + nominaReceptor.get('Puesto')\n                    ],\n                    [\n                        'JORNADA: \\t' + nominaReceptor.get('TipoJornada'),\n                        'DEPARTAMENTO: \\t' + nominaReceptor.get('Departamento')\n                    ],\n                    [\n                        'NSS: \\t' + nominaReceptor.get('NumSeguridadSocial'),\n                        'SBC: \\t' + nominaReceptor.get('SalarioBaseCotApor')\n                    ],\n                    ['TIPO SALARIO: \\t' + 'MIXTO', 'SALARIO DIARIO: \\t' + nominaReceptor.get('SalarioDiarioIntegrado')],\n                    ['DOMICILIO FISCAL: \\t' + receptor.get('DomicilioFiscalReceptor'), 'REGIMEN FISCAL: \\t' + receptor.get('RegimenFiscalReceptor')]\n                ]\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected generateNominaMiddleContent(comprobante: CNodeInterface): Content {\n        const nominaPercepciones = comprobante.searchNodes(\n            'cfdi:Complemento',\n            'nomina12:Nomina',\n            'nomina12:Percepciones',\n            'nomina12:Percepcion'\n        );\n        const nominaDeducciones = comprobante.searchNodes(\n            'cfdi:Complemento',\n            'nomina12:Nomina',\n            'nomina12:Deducciones',\n            'nomina12:Deduccion'\n        );\n        const nominaOtrosPagos = comprobante.searchNodes(\n            'cfdi:Complemento',\n            'nomina12:Nomina',\n            'nomina12:OtrosPagos',\n            'nomina12:OtroPago'\n        );\n\n        if (nominaPercepciones === undefined || nominaDeducciones === undefined || nominaOtrosPagos === undefined) return '';\n\n        const rowOtrosPagos = nominaOtrosPagos.map<TableCell[]>((otroPago) => {\n            return [\n                'OP-'+otroPago.get('TipoOtroPago'),\n                otroPago.get('Clave'),\n                otroPago.get('Concepto'),\n                formatCurrency(0.00),\n                formatCurrency(otroPago.get('Importe'))\n            ];\n        })\n        const rowsPercepciones = nominaPercepciones.map<TableCell[]>((percepcion) => {\n            return [\n               'P-'+percepcion.get('TipoPercepcion'),\n                percepcion.get('Clave'),\n                percepcion.get('Concepto'),\n                formatCurrency(percepcion.get('ImporteGravado')),\n                formatCurrency(percepcion.get('ImporteExcento'))\n            ];\n        });\n        rowOtrosPagos.forEach(pago => {\n            rowsPercepciones.push(pago);\n        });\n        rowsPercepciones.unshift(['Tipo Percepción', 'Clave', 'Concepto', 'Importe Gravado', 'Importe Exento']);\n        \n        const rowsDeducciones = nominaDeducciones.map<TableCell[]>((deduccion) => {\n            return [\n                deduccion.get('TipoDeduccion'),\n                deduccion.get('Clave'),\n                deduccion.get('Concepto'),\n                formatCurrency(deduccion.get('Importe'))\n            ];\n        });\n        rowsDeducciones.unshift(['Tipo Deducción', 'Clave', 'Concepto', 'Importe']);\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['60%', '40%'],\n                body: [\n                    [\n                        {\n                            text: 'Percepciones',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'Deducciones',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        }\n                    ],\n                    [\n                        {\n                            style: 'tableList',\n                            table: {\n                                widths: ['auto', 'auto', 'auto', 'auto', 'auto'],\n                                body: rowsPercepciones\n                            },\n                            layout: {\n                                fillColor(i): string | null {\n                                    return i === 0 ? '#CCCCCC' : null;\n                                }\n                            }\n                        },\n                        {\n                            style: 'tableList',\n                            table: {\n                                widths: ['auto', 'auto', 'auto', 'auto'],\n                                body: rowsDeducciones\n                            },\n                            layout: {\n                                fillColor(i): string | null {\n                                    return i === 0 ? '#CCCCCC' : null;\n                                }\n                            }\n                        }\n                    ]\n                ]\n            },\n            layout: {\n                fillColor(i): string | null {\n                    return i === 0 ? '#CCCCCC' : null;\n                }\n            }\n        };\n    }\n\n    protected generateContent(cfdiData: CfdiData): Content {\n        const comprobante = cfdiData.comprobante();\n        const emisor = cfdiData.emisor();\n        const receptor = cfdiData.receptor();\n        const conceptos = comprobante.searchNodes('cfdi:Conceptos', 'cfdi:Concepto');\n        const additionalFields = cfdiData.additionalFields();\n        const additionalFields2 = cfdiData.additionalFieldsUP();\n\n        const content: Content[] = [];\n        content.push(this.generateTopContent(comprobante, cfdiData.logo()));\n        content.push('\\n');\n        content.push(this.generateEmisorContent(emisor));\n        content.push('\\n');\n        if (comprobante.get('TipoDeComprobante') !== 'N') {\n        content.push(this.generateReceptorContent(receptor, cfdiData.address()));\n        content.push('\\n');\n        }\n        if (additionalFields2) {\n            additionalFields2.forEach((element) => {\n                content.push({\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [\n                            [{ text: element.title, style: 'tableHeader' }],\n                            [{ text: element.value, style: 'infoHighlight' }]\n                        ]\n                    },\n                    layout: 'lightHorizontalLines'\n                });\n                content.push('\\n');\n            });\n        }\n        if (comprobante.get('TipoDeComprobante') !== 'P') {\n            this.useGlobalInformation(comprobante, content);\n            content.push(this.generateGeneralInvoiceInfoContent(comprobante));\n            content.push('\\n');\n        }\n        if (comprobante.get('TipoDeComprobante') === 'N') {\n            //Implementar el contenido de nomina\n            //Temporal Nominas\n            content.push(this.generateNominaTopContent(comprobante));\n            content.push('\\n');\n            content.push(this.generateNominaMiddleContent(comprobante));\n            content.push('\\n');\n        }\n\n        if (comprobante.get('TipoDeComprobante') !== 'N') {\n        content.push(this.generateConceptsContent(conceptos));\n        content.push('\\n');\n        }\n        content.push(this.generateCurrencyRelatedInfo(comprobante));\n        content.push('\\n');\n\n        /** Area of complements */\n        usePago10Complement(comprobante, content);\n        usePago20Complement(comprobante, content);\n        useImpLocal10Complement(comprobante, content);\n        /** **/\n\n        if (additionalFields) {\n            additionalFields.forEach((element) => {\n                content.push({\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [\n                            [{ text: element.title, style: 'tableHeader' }],\n                            [{ text: element.value, style: 'infoHighlight' }]\n                        ]\n                    },\n                    layout: 'lightHorizontalLines'\n                });\n                content.push('\\n');\n            });\n        }\n\n        content.push(this.generateStampContent(cfdiData));\n\n        return content;\n    }\n\n    public translate(cfdiData: CfdiData, defaultStyle: Style): TDocumentDefinitions {\n        const comprobante = cfdiData.comprobante();\n        const tfd = cfdiData.timbreFiscalDigital();\n\n        return {\n            content: this.generateContent(cfdiData),\n            styles: {\n                tableHeader: {\n                    bold: true,\n                    fontSize: 10,\n                    color: 'black'\n                },\n                infoHighlight: {\n                    fontSize: 11,\n                    color: 'black'\n                },\n                //Se agrega estilo para los datos grandes de serie y folio\n                serieAndFolio: {\n                    bold: true,\n                    fontSize: 15,\n                    color: 'green'\n                },\n                tableContent: {\n                    fontSize: 8,\n                    color: 'black',\n                    alignment: 'left'\n                },\n                tableList: {\n                    fontSize: 7,\n                    color: 'black',\n                    alignment: 'center'\n                },\n                tableSat: {\n                    fontSize: 5,\n                    color: 'black',\n                    alignment: 'left'\n                }\n            },\n            defaultStyle,\n            footer: (currentPage, pageCount) =>\n                this.generateFooter(comprobante.get('Version'), tfd.get('UUID'), currentPage, pageCount)\n        };\n    }\n}\n","import { CNodeInterface } from '@nodecfdi/cfdiutils-common';\nimport { Content, TableCell, TableLayout } from 'pdfmake/interfaces';\nimport { formatCurrency } from '../../utils/currency';\n\nconst tableLayoutBordered = (): TableLayout => {\n    return {\n        hLineWidth: (i, node): number => {\n            if (i === 0 || i === node.table.body.length) {\n                return 0.8;\n            }\n\n            return i === node.table.headerRows ? 0.8 : 0.5;\n        },\n        vLineWidth: (i, node): number => {\n            return i === 0 || i === node.table.widths?.length ? 0.8 : 0;\n        },\n        hLineColor: (i, node): string => {\n            return i === 0 || i === node.table.body.length ? 'black' : 'gray';\n        },\n        paddingLeft(i): number {\n            return i === 0 ? 0 : 8;\n        },\n        paddingRight(i, node): number {\n            return i === (node.table.widths?.length || 0) - 1 ? 0 : 8;\n        }\n    };\n};\n\nconst useImpLocal10Complement = (comprobante: CNodeInterface, currentContent: Content[]): void => {\n    // Verify if exists ImpLocal10 complement\n    const impLocal10 = comprobante.searchNode('cfdi:Complemento', 'implocal:ImpuestosLocales');\n    if (!impLocal10) return;\n\n    const bodyImpLocal10: TableCell[][] = [];\n\n    // Header imp local\n    bodyImpLocal10.push([\n        {\n            text: 'COMPLEMENTO IMPUESTOS LOCALES',\n            style: 'tableHeader',\n            colSpan: 4,\n            alignment: 'center'\n        },\n        {},\n        {},\n        {}\n    ]);\n\n    // SubHeader with values on implocal10\n    bodyImpLocal10.push([\n        'TOTAL RETENCIONES:',\n        formatCurrency(impLocal10.get('TotaldeRetenciones')),\n        'TOTAL TRASLADOS:',\n        formatCurrency(impLocal10.get('TotaldeTraslados'))\n    ]);\n\n    // if exists node retenciones locales\n    const retencionesLocales = impLocal10.searchNode('implocal:RetencionesLocales');\n    if (retencionesLocales) {\n        bodyImpLocal10.push([\n            {\n                style: 'tableContent',\n                margin: 3,\n                table: {\n                    widths: ['*', '*', '*'],\n                    body: [\n                        [\n                            {\n                                text: 'RETENCIONES LOCALES',\n                                style: 'tableHeader',\n                                colSpan: 3,\n                                alignment: 'center'\n                            },\n                            {},\n                            {}\n                        ],\n                        [\n                            {\n                                text: 'IMP LOCAL RETENIDO',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'TASA DE RETENCIÓN',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'IMPORTE',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            }\n                        ],\n                        [\n                            retencionesLocales.get('ImpLocRetenido'),\n                            retencionesLocales.get('TasadeRetencion'),\n                            formatCurrency(retencionesLocales.get('Importe'))\n                        ]\n                    ]\n                },\n                layout: tableLayoutBordered(),\n                colSpan: 4\n            },\n            {},\n            {},\n            {}\n        ]);\n    }\n\n    // if exists node traslados locales\n    const trasladosLocales = impLocal10.searchNode('implocal:TrasladosLocales');\n    if (trasladosLocales) {\n        bodyImpLocal10.push([\n            {\n                style: 'tableContent',\n                margin: 3,\n                table: {\n                    widths: ['*', '*', '*'],\n                    body: [\n                        [\n                            {\n                                text: 'TRASLADOS LOCALES',\n                                style: 'tableHeader',\n                                colSpan: 3,\n                                alignment: 'center'\n                            },\n                            {},\n                            {}\n                        ],\n                        [\n                            {\n                                text: 'IMP LOCAL TRASLADADO',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'TASA DE TRASLADO',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            },\n                            {\n                                text: 'IMPORTE',\n                                fillColor: '#eeeeff',\n                                style: 'tableSubHeader',\n                                alignment: 'left'\n                            }\n                        ],\n                        [\n                            trasladosLocales.get('ImpLocTrasladado'),\n                            trasladosLocales.get('TasadeTraslado'),\n                            formatCurrency(trasladosLocales.get('Importe'))\n                        ]\n                    ]\n                },\n                layout: tableLayoutBordered(),\n                colSpan: 4\n            },\n            {},\n            {},\n            {}\n        ]);\n    }\n\n    currentContent.push({\n        style: 'tableContent',\n        table: {\n            widths: [95, '*', 95, '*'],\n            body: bodyImpLocal10\n        },\n        layout: tableLayoutBordered()\n    });\n    currentContent.push('\\n');\n};\n\nexport { useImpLocal10Complement };\n","import {\n    Content,\n    ContentColumns,\n    ContentTable,\n    Style,\n    TableCell,\n    TableLayout,\n    TDocumentDefinitions\n} from 'pdfmake/interfaces';\nimport { CNodeInterface, CNodes } from '@nodecfdi/cfdiutils-common';\nimport { DocumentTranslatorInterface } from './document-translator-interface';\nimport { RetencionesData } from '../retenciones-data';\nimport { breakEveryNCharacters } from '../utils/break-characters';\nimport { formatCurrency } from '../utils/currency';\n\nexport class GenericRetencionesTranslator implements DocumentTranslatorInterface<RetencionesData> {\n    public version = '1.0';\n\n    protected tableLayoutBordered(): TableLayout {\n        return {\n            hLineWidth: (i, node): number => {\n                if (i === 0 || i === node.table.body.length) {\n                    return 0.8;\n                }\n\n                return i === node.table.headerRows ? 0.8 : 0.5;\n            },\n            vLineWidth: (i, node): number => {\n                return i === 0 || i === node.table.widths?.length ? 0.8 : 0;\n            },\n            hLineColor: (i, node): string => {\n                return i === 0 || i === node.table.body.length ? 'black' : 'gray';\n            },\n            paddingLeft(i): number {\n                return i === 0 ? 0 : 8;\n            },\n            paddingRight(i, node): number {\n                return i === (node.table.widths?.length || 0) - 1 ? 0 : 8;\n            }\n        };\n    }\n\n    protected generateFooter(version: string, uuid: string, currentPage: number, pageCount: number): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: [\n                    [\n                        {\n                            text: `Este documento es una representación impresa de un Comprobante Fiscal Digital por Internet que ampara Retenciones e Información de Pagos versión ${version}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    [\n                        {\n                            text: `UUID: ${uuid} - Página ${currentPage} de ${pageCount}`,\n                            style: 'tableList',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ]\n                ]\n            },\n            layout: 'noBorders'\n        };\n    }\n\n    protected generateTopContent(retenciones: CNodeInterface, logo?: string): Content {\n        const header: ContentColumns = {\n            columns: [\n                {\n                    width: '*',\n                    alignment: 'left',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [['']]\n                    },\n                    layout: 'lightHorizontalLines'\n                },\n                {\n                    width: 'auto',\n                    alignment: 'center',\n                    style: 'tableContent',\n                    table: {\n                        widths: ['auto', 'auto'],\n                        body: [\n                            ['FOLIO:', retenciones.get('FolioInt')],\n                            ['FECHA:', retenciones.get('FechaExp')],\n                            ['COMPROBANTE:', 'RETENCIÓN'],\n                            ['VERSIÓN:', this.version]\n                        ]\n                    },\n                    layout: 'lightHorizontalLines'\n                }\n            ]\n        };\n        if (logo) {\n            (header.columns[0] as ContentTable).table.body[0][0] = { image: logo, fit: [80, 80] };\n            (header.columns[0] as ContentTable).table.widths = ['*'];\n        }\n\n        return header;\n    }\n\n    protected generateEmisorContent(emisor: CNodeInterface): Content {\n        const body: TableCell[][] = [];\n        body.push([\n            {\n                text: 'EMISOR',\n                style: 'tableHeader',\n                colSpan: 4,\n                alignment: 'left'\n            },\n            {},\n            {},\n            {}\n        ]);\n        body.push([\n            'NOMBRE:',\n            emisor.get('NomDenRazSocE'),\n            'RFC:',\n            emisor.get(this.version === '1.0' ? 'RFCEmisor' : 'RfcE')\n        ]);\n\n        if (this.version === '2.0') {\n            body.push(['REGIMEN FISCAL:', emisor.get('RegimenFiscalE'), '', '']);\n        }\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: body\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateReceptorContent(receptor: CNodeInterface): Content {\n        const nacionalidad = receptor.get(this.version === '1.0' ? 'Nacionalidad' : 'NacionalidadR');\n        const infoReceptor: TableCell[] = [];\n        let domicilioFiscal = '';\n        if (nacionalidad === 'Nacional') {\n            const nacional = receptor.searchNode('retenciones:Nacional');\n            if (nacional) {\n                infoReceptor.push(\n                    'NOMBRE:',\n                    nacional.get('NomDenRazSocR'),\n                    'RFC:',\n                    nacional.get(this.version === '1.0' ? 'RFCRecep' : 'RfcR')\n                );\n                domicilioFiscal = nacional.get('DomicilioFiscalR');\n            }\n        } else {\n            const extranjero = receptor.searchNode('retenciones:Extranjero');\n            if (extranjero) {\n                infoReceptor.push(\n                    'NOMBRE:',\n                    extranjero.get('NomDenRazSocR'),\n                    'NUM. REG. ID TRIB.:',\n                    extranjero.get(this.version === '1.0' ? 'NumRegIdTrib' : 'NumRegIdTribR')\n                );\n            }\n        }\n        const body: TableCell[][] = [];\n        body.push([\n            {\n                text: 'RECEPTOR',\n                style: 'tableHeader',\n                colSpan: 4,\n                alignment: 'left'\n            },\n            {},\n            {},\n            {}\n        ]);\n        body.push([\n            'NACIONALIDAD:',\n            nacionalidad,\n            this.version === '2.0' && nacionalidad === 'Nacional' ? 'DOMICILIO FISCAL:' : '',\n            this.version === '2.0' && nacionalidad === 'Nacional' ? domicilioFiscal : ''\n        ]);\n        body.push(infoReceptor);\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['auto', '*', 'auto', 'auto'],\n                body: body\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generatePeriodoContent(periodo: CNodeInterface, claveRet: string): Content {\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*', '*'],\n                body: [\n                    [\n                        {\n                            text: 'PERIODO MES INICIAL',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'PERIODO MES FINAL',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'PERIODO EJERCICIO ANUAL',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'TIPO DE RETENCION',\n                            style: 'tableHeader',\n                            alignment: 'left'\n                        }\n                    ],\n                    [\n                        periodo.get('MesIni'),\n                        periodo.get('MesFin'),\n                        periodo.get(this.version === '1.0' ? 'Ejerc' : 'Ejercicio'),\n                        claveRet\n                    ]\n                ]\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateImpuestosRetenidos(impuestosRetenidos: CNodeInterface[]): TableCell[][] {\n        const rowsRetenciones: TableCell[][] = [];\n        if (impuestosRetenidos.length > 0) {\n            rowsRetenciones.push([\n                {\n                    text: 'IMPUESTOS RETENIDOS',\n                    style: 'tableHeader',\n                    colSpan: 3,\n                    alignment: 'center'\n                },\n                {},\n                {}\n            ]);\n            rowsRetenciones.push([\n                {\n                    text: 'TIPO DE IMPUESTO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                {\n                    text: 'TIPO DE PAGO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                {\n                    text: 'MONTO RETENIDO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                }\n            ]);\n        }\n        impuestosRetenidos.forEach((impuestoRetenido) => {\n            rowsRetenciones.push([\n                impuestoRetenido.get(this.version === '1.0' ? 'Impuesto' : 'ImpuestoRet'),\n                impuestoRetenido.get('TipoPagoRet'),\n                formatCurrency(impuestoRetenido.get(this.version === '1.0' ? 'montoRet' : 'MontoRet'))\n            ]);\n        });\n\n        return rowsRetenciones;\n    }\n\n    protected generateTotales(totales: CNodeInterface): Content {\n        const impuestosRetenidos = totales.searchNodes('retenciones:ImpRetenidos');\n        const impuestosRetenidosBody: TableCell[][] = this.generateImpuestosRetenidos(impuestosRetenidos);\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*', '*'],\n                body: [\n                    [\n                        {\n                            text: 'TOTALES',\n                            style: 'tableHeader',\n                            colSpan: 4,\n                            alignment: 'center'\n                        },\n                        {},\n                        {},\n                        {}\n                    ],\n                    [\n                        {\n                            text: 'MONTO TOTAL DE OPERACIÓN',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'MONTO TOTAL GRAVADO',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'MONTO TOTAL EXENTO',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        },\n                        {\n                            text: 'MONTO TOTAL RETENIDO',\n                            style: 'tableSubHeader',\n                            fillColor: '#eeeeff',\n                            alignment: 'left'\n                        }\n                    ],\n                    [\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotOperacion' : 'MontoTotOperacion')),\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotGrav' : 'MontoTotGrav')),\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotExent' : 'MontoTotExent')),\n                        formatCurrency(totales.get(this.version === '1.0' ? 'montoTotRet' : 'MontoTotRet'))\n                    ],\n                    [\n                        {\n                            style: 'tableContent',\n                            margin: 5,\n                            colSpan: 4,\n                            table: {\n                                widths: ['*', '*', '*'],\n                                body: impuestosRetenidosBody\n                            },\n                            layout: this.tableLayoutBordered()\n                        },\n                        {},\n                        {},\n                        {}\n                    ]\n                ]\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateStampContent(data: RetencionesData): Content {\n        const retenciones = data.retenciones();\n        const tfd = data.timbreFiscalDigital();\n        const tfdVersion = tfd.get(this.version === '1.0' ? 'version' : 'Version');\n        const tfdSourceString = data.tfdSourceString();\n        const qrUrl = data.qrUrl();\n        const tfdCellsTable: TableCell[][] = [];\n        if (tfd) {\n            tfdCellsTable.push(\n                [\n                    {\n                        colSpan: 1,\n                        rowSpan: 8,\n                        qr: qrUrl,\n                        fit: 100\n                    },\n                    '',\n                    ''\n                ],\n                [\n                    '',\n                    'NUMERO SERIE CERTIFICADO SAT',\n                    tfd.get(tfdVersion === '1.0' ? 'noCertificadoSAT' : 'NoCertificadoSAT')\n                ],\n                [\n                    '',\n                    'NUMERO SERIE CERTIFICADO EMISOR',\n                    retenciones.get(this.version === '1.0' ? 'NumCert' : 'NoCertificado')\n                ],\n                ['', 'FECHA HORA CERTIFICACIÓN', tfd.get('FechaTimbrado')],\n                ['', 'FOLIO FISCAL UUID', tfd.get('UUID')],\n                [\n                    '',\n                    'SELLO DIGITAL',\n                    breakEveryNCharacters(tfd.get(tfdVersion === '1.0' ? 'selloCFD' : 'SelloCFD'), 86)\n                ],\n                [\n                    '',\n                    'SELLO DEL SAT',\n                    breakEveryNCharacters(tfd.get(tfdVersion === '1.0' ? 'selloSAT' : 'SelloSAT'), 86)\n                ]\n            );\n        }\n        tfdCellsTable.push([\n            '',\n            'CADENA ORIGINAL CC:',\n            {\n                text: breakEveryNCharacters(tfdSourceString, 86)\n            }\n        ]);\n\n        return {\n            style: 'tableSat',\n            table: {\n                widths: ['auto', 'auto', '*'],\n                body: tfdCellsTable\n            },\n            layout: 'lightHorizontalLines'\n        };\n    }\n\n    protected contentService(service: CNodeInterface): TableCell[][] {\n        const tableService: TableCell[][] = [];\n        // SubHeaders per service\n        tableService.push([\n            {\n                text: 'FORMA DE PAGO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            },\n            {\n                text: 'TIPO DE SERVICIO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            },\n            {\n                text: 'FECHA DE PAGO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            },\n            {\n                text: 'PRECIO DE SERVICIO',\n                style: 'tableSubHeader',\n                fillColor: '#eeeeff',\n                alignment: 'left'\n            }\n        ]);\n        tableService.push([\n            service.get('FormaPagoServ'),\n            service.get('TipoDeServ'),\n            service.get('FechaServ'),\n            formatCurrency(service.get('PrecioServSinIVA'))\n        ]);\n        if (service.offsetExists('SubTipServ') || service.offsetExists('RFCTerceroAutorizado')) {\n            tableService.push([\n                {\n                    text: 'SUBTIPO DE SERVICIO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                {\n                    text: 'RFC TERCERO AUTORIZADO',\n                    style: 'tableSubHeader',\n                    fillColor: '#eeeeff',\n                    alignment: 'left'\n                },\n                '',\n                ''\n            ]);\n            tableService.push([service.get('SubTipServ'), service.get('RFCTerceroAutorizado'), '', '']);\n        }\n        const impuestosTrasladadosDelServicio = service.searchNode(\n            'plataformasTecnologicas:ImpuestosTrasladadosdelServicio'\n        );\n        const contribucionGubernamental = service.searchNode('plataformasTecnologicas:ContribucionGubernamental');\n        const comisionDelServicio = service.searchNode('plataformasTecnologicas:ComisionDelServicio');\n\n        if (impuestosTrasladadosDelServicio) {\n            tableService.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*', '*', '*', '*', '*'],\n                        body: [\n                            [\n                                {\n                                    text: 'IMPUESTOS TRASLADADOS DEL SERVICIO',\n                                    style: 'tableHeader',\n                                    colSpan: 5,\n                                    alignment: 'center'\n                                },\n                                {},\n                                {},\n                                {},\n                                {}\n                            ],\n                            [\n                                {\n                                    text: 'IMPUESTO BASE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPUESTO',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'TIPO FACTOR',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'TASA O CUOTA',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPORTE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                }\n                            ],\n                            [\n                                formatCurrency(impuestosTrasladadosDelServicio.get('Base')),\n                                impuestosTrasladadosDelServicio.get('Impuesto'),\n                                impuestosTrasladadosDelServicio.get('TipoFactor'),\n                                impuestosTrasladadosDelServicio.get('TasaCuota'),\n                                formatCurrency(impuestosTrasladadosDelServicio.get('Importe'))\n                            ]\n                        ]\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 4\n                },\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        if (contribucionGubernamental) {\n            tableService.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*', '*'],\n                        body: [\n                            [\n                                {\n                                    text: 'CONTRIBUCIÓN GUBERNAMENTAL',\n                                    style: 'tableHeader',\n                                    colSpan: 2,\n                                    alignment: 'center'\n                                },\n                                {}\n                            ],\n                            [\n                                {\n                                    text: 'ESTADO',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPORTE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                }\n                            ],\n                            [\n                                contribucionGubernamental.get('EntidadDondePagaLaContribucion'),\n                                formatCurrency(contribucionGubernamental.get('ImpContrib'))\n                            ]\n                        ]\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 4\n                },\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        if (comisionDelServicio) {\n            tableService.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*', '*', '*'],\n                        body: [\n                            [\n                                {\n                                    text: 'COMISIÓN DEL SERVICIO',\n                                    style: 'tableHeader',\n                                    colSpan: 3,\n                                    alignment: 'center'\n                                },\n                                {},\n                                {}\n                            ],\n                            [\n                                {\n                                    text: 'BASE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'PORCENTAJE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                },\n                                {\n                                    text: 'IMPORTE',\n                                    style: 'tableSubHeader',\n                                    fillColor: '#eeeeff',\n                                    alignment: 'left'\n                                }\n                            ],\n                            [\n                                formatCurrency(comisionDelServicio.get('Base')),\n                                comisionDelServicio.get('Porcentaje'),\n                                formatCurrency(comisionDelServicio.get('Importe'))\n                            ]\n                        ]\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 4\n                },\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        return tableService;\n    }\n\n    protected generateContentPerService(servicios: CNodes): TableCell[][] {\n        const tableServices: TableCell[][] = [];\n        // Header global\n        tableServices.push([\n            {\n                text: 'SERVICIOS',\n                style: 'tableHeader',\n                alignment: 'center'\n            }\n        ]);\n        // Per Services\n        servicios.forEach((servicio) => {\n            tableServices.push([\n                {\n                    margin: 5,\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*', '*', '*', '*'],\n                        body: this.contentService(servicio)\n                    },\n                    layout: this.tableLayoutBordered()\n                }\n            ]);\n        });\n\n        return tableServices;\n    }\n\n    protected generatePlataformasTecnologicas(plataformasTecnologicas: CNodeInterface): Content {\n        const servicios = plataformasTecnologicas.searchNodes(\n            'plataformasTecnologicas:Servicios',\n            'plataformasTecnologicas:DetallesDelServicio'\n        );\n        const bodyPlataformasTecnologicas: TableCell[][] = [];\n        // Header global\n        bodyPlataformasTecnologicas.push([\n            {\n                text: 'SERVICIO MEDIANTE PLATAFORMAS TECNOLÓGICAS',\n                style: 'tableHeader',\n                colSpan: 5,\n                alignment: 'center'\n            },\n            {},\n            {},\n            {},\n            {}\n        ]);\n        // SubHeaders of global\n        bodyPlataformasTecnologicas.push([\n            {\n                text: 'VERSION',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'PERIODICIDAD',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'NUMERO SERVICIOS',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'SUBTOTAL OPERACIONES',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL IVA',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            }\n        ]);\n        bodyPlataformasTecnologicas.push([\n            plataformasTecnologicas.get('Version'),\n            plataformasTecnologicas.get('Periodicidad'),\n            plataformasTecnologicas.get('NumServ'),\n            formatCurrency(plataformasTecnologicas.get('MonTotServSIVA')),\n            formatCurrency(plataformasTecnologicas.get('TotalIVATrasladado'))\n        ]);\n        bodyPlataformasTecnologicas.push([\n            {\n                text: 'TOTAL IVA RETENIDO',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL ISR RETENIDO',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'DIFERENCIA IVA',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL USO DE PLATAFORMA',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            },\n            {\n                text: 'TOTAL CONTRIBUCIÓN GUBERNAMENTAL',\n                fillColor: '#eeeeff',\n                style: 'tableSubHeader',\n                alignment: 'left'\n            }\n        ]);\n        bodyPlataformasTecnologicas.push([\n            formatCurrency(plataformasTecnologicas.get('TotalIVARetenido')),\n            formatCurrency(plataformasTecnologicas.get('TotalISRRetenido')),\n            formatCurrency(plataformasTecnologicas.get('DifIVAEntregadoPrestServ')),\n            formatCurrency(plataformasTecnologicas.get('MonTotalporUsoPlataforma')),\n            plataformasTecnologicas.get('MonTotalContribucionGubernamental') !== ''\n                ? formatCurrency(plataformasTecnologicas.get('MonTotalContribucionGubernamental'))\n                : ''\n        ]);\n\n        if (servicios.length > 0) {\n            bodyPlataformasTecnologicas.push([\n                {\n                    style: 'tableContent',\n                    margin: 3,\n                    table: {\n                        widths: ['*'],\n                        body: this.generateContentPerService(servicios)\n                    },\n                    layout: this.tableLayoutBordered(),\n                    colSpan: 5\n                },\n                {},\n                {},\n                {},\n                {}\n            ]);\n        }\n\n        return {\n            style: 'tableContent',\n            table: {\n                widths: ['*', '*', '*', '*', '*'],\n                body: bodyPlataformasTecnologicas\n            },\n            layout: this.tableLayoutBordered()\n        };\n    }\n\n    protected generateContent(data: RetencionesData): Content {\n        const retenciones = data.retenciones();\n        const emisor = data.emisor();\n        const receptor = data.receptor();\n        const periodo = data.periodo();\n        const totales = data.totales();\n        const additionalFields = data.additionalFields();\n        const plataformasTecnologicas = retenciones.searchNode(\n            'retenciones:Complemento',\n            'plataformasTecnologicas:ServiciosPlataformasTecnologicas'\n        );\n        const content: Content[] = [];\n        content.push(this.generateTopContent(retenciones, data.logo()));\n        content.push('\\n');\n        content.push(this.generateEmisorContent(emisor));\n        content.push('\\n');\n        content.push(this.generateReceptorContent(receptor));\n        content.push('\\n');\n        content.push('\\n');\n        content.push(this.generatePeriodoContent(periodo, retenciones.get('CveRetenc')));\n        content.push('\\n');\n        content.push(this.generateTotales(totales));\n        content.push('\\n');\n        if (plataformasTecnologicas) {\n            content.push(this.generatePlataformasTecnologicas(plataformasTecnologicas));\n            content.push('\\n');\n        }\n        if (additionalFields) {\n            additionalFields.forEach((element) => {\n                content.push({\n                    style: 'tableContent',\n                    table: {\n                        widths: ['*'],\n                        body: [[{ text: element.title, style: 'tableHeader' }], [element.value]]\n                    },\n                    layout: 'lightHorizontalLines'\n                });\n                content.push('\\n');\n            });\n        }\n        content.push(this.generateStampContent(data));\n\n        return content;\n    }\n\n    public translate(data: RetencionesData, defaultStyle: Style): TDocumentDefinitions {\n        const retenciones = data.retenciones();\n        const tfd = data.timbreFiscalDigital();\n        this.version = retenciones.get('Version');\n\n        return {\n            content: this.generateContent(data),\n            styles: {\n                tableHeader: {\n                    bold: true,\n                    fontSize: 10,\n                    color: 'black'\n                },\n                tableSubHeader: {\n                    bold: true,\n                    fontSize: 9,\n                    color: 'black'\n                },\n                tableContent: {\n                    fontSize: 8,\n                    color: 'black',\n                    alignment: 'left'\n                },\n                tableList: {\n                    fontSize: 7,\n                    color: 'black',\n                    alignment: 'center'\n                },\n                tableSat: {\n                    fontSize: 5,\n                    color: 'black',\n                    alignment: 'left'\n                }\n            },\n            defaultStyle,\n            footer: (currentPage, pageCount) =>\n                this.generateFooter(this.version, tfd.get('UUID'), currentPage, pageCount)\n        };\n    }\n}\n","/* istanbul ignore file */\nimport { Style, TDocumentDefinitions } from 'pdfmake/interfaces';\nimport { BuilderInterface } from './builder-interface';\nimport { DocumentTranslatorInterface } from '../templates/document-translator-interface';\nimport { AbstractInvoiceData } from '../abstract-invoice-data';\nimport { getPdfMake, PdfMakeBrowser } from '../pdfmake-builder';\n\nexport class PdfMakerBrowserBuilder<T extends AbstractInvoiceData> implements BuilderInterface<T> {\n    private _documentTranslator: DocumentTranslatorInterface<T>;\n\n    private readonly _defaultStyle: Style;\n\n    constructor(documentTranslator: DocumentTranslatorInterface<T>, defaultStyle?: Style) {\n        this._documentTranslator = documentTranslator;\n        if (!defaultStyle) {\n            defaultStyle = {\n                font: 'Roboto'\n            };\n        }\n        this._defaultStyle = defaultStyle;\n    }\n\n    public build(_data: T, _destination: string): Promise<void> {\n        console.warn('This method not permitted on browser');\n\n        return Promise.reject('Method not work on browser');\n    }\n\n    public buildBase64(data: T): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            try {\n                const pdfTemplate = this.buildPdf(data);\n                const pfdDocGenerator = getPdfMake<PdfMakeBrowser>().createPdf(pdfTemplate);\n                pfdDocGenerator.getBase64((pdfBase64) => {\n                    resolve(pdfBase64);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    public buildPdf(data: T): TDocumentDefinitions {\n        return this._documentTranslator.translate(data, this._defaultStyle);\n    }\n}\n","import { Style, TDocumentDefinitions } from 'pdfmake/interfaces';\nimport { BuilderInterface } from './builder-interface';\nimport { DocumentTranslatorInterface } from '../templates/document-translator-interface';\nimport { AbstractInvoiceData } from '../abstract-invoice-data';\nimport { getPdfMake, PdfMakeNode } from '../pdfmake-builder';\n\nexport class PdfMakerBuilder<T extends AbstractInvoiceData> implements BuilderInterface<T> {\n    private readonly _documentTranslator: DocumentTranslatorInterface<T>;\n\n    private readonly _defaultStyle: Style;\n\n    constructor(documentTranslator: DocumentTranslatorInterface<T>, defaultStyle?: Style) {\n        this._documentTranslator = documentTranslator;\n        if (!defaultStyle) {\n            defaultStyle = {\n                font: 'Roboto'\n            };\n        }\n        this._defaultStyle = defaultStyle;\n    }\n\n    public build(data: T, destination: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const fs = require('fs');\n            const pdfTemplate = this.buildPdf(data);\n            const pdfStream = getPdfMake<PdfMakeNode>().createPdfKitDocument(pdfTemplate, {});\n            const fileWriteStream = fs.createWriteStream(destination);\n            fileWriteStream.on('error', (err: Error) => {\n                fileWriteStream.end();\n\n                return reject(err);\n            });\n\n            pdfStream.pipe(fileWriteStream);\n            pdfStream.on('end', () => {\n                return resolve();\n            });\n            pdfStream.on('error', (err) => {\n                /* istanbul ignore next */\n                return reject(err);\n            });\n            pdfStream.end();\n        });\n    }\n\n    public buildBase64(data: T): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const pdfTemplate = this.buildPdf(data);\n            const pdfStream = getPdfMake<PdfMakeNode>().createPdfKitDocument(pdfTemplate, {});\n            const chunks: Uint8Array[] = [];\n            pdfStream.on('data', (chunk) => {\n                chunks.push(chunk);\n            });\n            pdfStream.on('end', () => {\n                return resolve(Buffer.concat(chunks).toString('base64'));\n            });\n            pdfStream.on('error', (err) => {\n                /* istanbul ignore next */\n                return reject(err);\n            });\n            pdfStream.end();\n        });\n    }\n\n    public buildPdf(data: T): TDocumentDefinitions {\n        return this._documentTranslator.translate(data, this._defaultStyle);\n    }\n}\n","import { CNodeInterface } from '@nodecfdi/cfdiutils-common';\nimport { AbstractInvoiceData } from './abstract-invoice-data';\n\nexport class RetencionesData extends AbstractInvoiceData {\n    private readonly _retenciones: CNodeInterface;\n\n    private readonly _periodo: CNodeInterface;\n\n    private readonly _totales: CNodeInterface;\n\n    constructor(\n        retenciones: CNodeInterface,\n        qrUrl: string,\n        tfdSourceString: string,\n        logo?: string,\n        additionalFields?: { title: string; value: string }[],\n        additionalFieldsUP?: { title: string; value: string }[]\n    ) {\n        super();\n        const emisor = retenciones.searchNode('retenciones:Emisor');\n        if (!emisor) {\n            throw new Error('La factura de retenciones no contiene nodo emisor');\n        }\n        const receptor = retenciones.searchNode('retenciones:Receptor');\n        if (!receptor) {\n            throw new Error('La factura de retenciones no contiene nodo receptor');\n        }\n        const periodo = retenciones.searchNode('retenciones:Periodo');\n        if (!periodo) {\n            throw new Error('La factura de retenciones no contiene nodo periodo');\n        }\n        const totales = retenciones.searchNode('retenciones:Totales');\n        if (!totales) {\n            throw new Error('La factura de retenciones no contiene nodo totales');\n        }\n        const timbreFiscalDigital = retenciones.searchNode('retenciones:Complemento', 'tfd:TimbreFiscalDigital');\n        if (!timbreFiscalDigital) {\n            throw new Error('La factura de retenciones no contiene complemento de timbre fiscal digital');\n        }\n\n        this._retenciones = retenciones;\n        this._emisor = emisor;\n        this._receptor = receptor;\n        this._periodo = periodo;\n        this._totales = totales;\n        this._timbreFiscalDigital = timbreFiscalDigital;\n        this._qrUrl = qrUrl;\n        this._tfdSourceString = tfdSourceString;\n        this._logo = logo;\n        this._additionalFields = additionalFields;\n        this._additionalFieldsUP = additionalFieldsUP;\n        if (this._qrUrl.trim().length === 0) {\n            this.buildUrlQr(this._retenciones);\n        }\n    }\n\n    public retenciones(): CNodeInterface {\n        return this._retenciones;\n    }\n\n    public periodo(): CNodeInterface {\n        return this._periodo;\n    }\n\n    public totales(): CNodeInterface {\n        return this._totales;\n    }\n}\n"],"names":["AbstractInvoiceData","constructor","this","_emisor","_receptor","_timbreFiscalDigital","_qrUrl","_tfdSourceString","_logo","_additionalFields","_additionalFieldsUP","emisor","receptor","timbreFiscalDigital","qrUrl","tfdSourceString","logo","additionalFields","additionalFieldsUP","buildUrlQr","node","rawString","XmlNodeUtils","nodeToXmlString","document","getParser","parseFromString","DiscoverExtractor","extract","e","getGroupToCurrency","group","basics","teens","hundreds","toCurrency","length","parseInt","substring","zeroAtTheEnd","num","moneda","number","toFixed","integers","indexOf","decimals","monedaName","numberToCurrency","noThousands","noHundreds","thousandsOfMillions","toUpperCase","Error","formatCurrency","currency","Number","isNaN","Intl","NumberFormat","style","currencyDisplay","format","breakEveryNCharacters","str","n","arr","match","RegExp","result","reduce","a","b","PdfmakeNotFound","msg","super","name","_pdfmake","getPdfMake","generateRelatedDocsContent","doctoRelacionados","relatedDocsCells","map","doc","get","unshift","text","colSpan","alignment","checkAndAddTotal","totales","attribute","rowToInsert","offsetExists","push","fontSize","generateTotalesInfoContent","totalesCells","firstRow","secondRow","bold","border","limit","i","comprobante","address","_comprobante","_address","searchNode","trim","generateFooter","version","uuid","currentPage","pageCount","table","widths","body","layout","generateTopContent","header","columns","width","image","fit","generateEmisorContent","generateAddress","tableCell","cellAddress","generateReceptorContent","receptorContent","useGlobalInformation","currentContent","globalInformation","undefined","generateGeneralInvoiceInfoContent","generateImpuestos","concepto","impuestosContent","traslados","searchNodes","retenciones","contentT","traslado","contentR","retencion","generateConceptsContent","conceptos","rowsConceptos","stack","fillColor","generateCurrencyRelatedInfo","totalImpuestosTrasladados","searchAttribute","totalImpuestosRetenidos","totalTasasTraslados","contentColumns","relatedInfoAndImport","margin","parseFloat","relacionados","uuidsArray","relacionado","relacionadosNode","deducciones","impRetenidos","generateStampContent","cfdiData","tfd","tfdCellsTable","rowSpan","qr","generateNominaTopContent","nomina","nominaEmisor","nominaReceptor","console","log","generateNominaMiddleContent","nominaPercepciones","nominaDeducciones","nominaOtrosPagos","rowOtrosPagos","otroPago","rowsPercepciones","percepcion","forEach","pago","rowsDeducciones","deduccion","generateContent","additionalFields2","content","element","title","value","usePago10Complement","pago10","pagos","usePago20Complement","pago20","useImpLocal10Complement","impLocal10","bodyImpLocal10","retencionesLocales","hLineWidth","headerRows","vLineWidth","hLineColor","paddingLeft","paddingRight","trasladosLocales","translate","defaultStyle","styles","tableHeader","color","infoHighlight","serieAndFolio","tableContent","tableList","tableSat","footer","tableLayoutBordered","nacionalidad","infoReceptor","domicilioFiscal","nacional","extranjero","generatePeriodoContent","periodo","claveRet","generateImpuestosRetenidos","impuestosRetenidos","rowsRetenciones","impuestoRetenido","generateTotales","impuestosRetenidosBody","data","tfdVersion","contentService","service","tableService","impuestosTrasladadosDelServicio","contribucionGubernamental","comisionDelServicio","generateContentPerService","servicios","tableServices","servicio","generatePlataformasTecnologicas","plataformasTecnologicas","bodyPlataformasTecnologicas","tableSubHeader","documentTranslator","_documentTranslator","_defaultStyle","font","build","_data","_destination","warn","Promise","reject","buildBase64","resolve","pdfTemplate","buildPdf","createPdf","getBase64","pdfBase64","destination","fs","require","pdfStream","createPdfKitDocument","fileWriteStream","createWriteStream","on","err","end","pipe","chunks","chunk","Buffer","concat","toString","_retenciones","_periodo","_totales","pdfMake"],"mappings":"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"}